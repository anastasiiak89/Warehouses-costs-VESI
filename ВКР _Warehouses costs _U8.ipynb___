{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1kgRK21FgG0YZRhaFo8R9FfHFfgTLDaIz","timestamp":1682460508071},{"file_id":"1OdUihf9qgmrTEdbneJ1dj6uBRE1Lc0Yd","timestamp":1682455235055},{"file_id":"1QtSUE8NERHAynAcNUn2zTszOrXMEhAAe","timestamp":1682407799232}],"collapsed_sections":["7wlCzadiXYrz"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Импорт библиотек"],"metadata":{"id":"5e3Mb5vCPKLD"}},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.preprocessing import LabelEncoder, StandardScaler\n","from keras.utils import to_categorical\n","from keras.models import Sequential\n","from keras.layers import Dense\n","import numpy as np\n","from sklearn import preprocessing\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","from sklearn.preprocessing import MinMaxScaler\n","from sklearn.metrics import r2_score\n","from sklearn.metrics import mean_absolute_error\n","from sklearn.metrics import r2_score\n","Model_choice = pd.DataFrame(columns=['Model', 'MAE', 'R squared'])\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LinearRegression, LogisticRegressionCV\n","from sklearn.ensemble import RandomForestRegressor\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.neighbors import KNeighborsRegressor\n","import tensorflow as tf\n","import keras"],"metadata":{"id":"fEYNnTrvPN8M","executionInfo":{"status":"ok","timestamp":1682461555492,"user_tz":-180,"elapsed":5785,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}}},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":["# Исходные данные"],"metadata":{"id":"l3nKHwv_2Pok"}},{"cell_type":"markdown","source":["Загружаем данные в Pandas Dataframe"],"metadata":{"id":"5ZOxpBx86Mq3"}},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"tb2y6BHbXCB2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1682461557948,"user_tz":-180,"elapsed":2459,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"d5cfae14-568a-4fd0-f2ac-3623e7343a0a"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["\n","\n","data = pd.read_excel('/content/drive/MyDrive/Logistics costs/Warehouse costs/dataset svh warehouses costs_2.xlsx')\n","data2 = pd.read_excel('/content/drive/MyDrive/Logistics costs/Warehouse costs/dataset vnedrenie Vesi.xlsx')\n","\n"],"metadata":{"id":"tCa4SYefUL6I","executionInfo":{"status":"ok","timestamp":1682461561874,"user_tz":-180,"elapsed":3929,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["data.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":629},"id":"-dLDvQDYXQ0F","executionInfo":{"status":"ok","timestamp":1682461561875,"user_tz":-180,"elapsed":24,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"78af4645-be18-4ed2-e989-ada84be27c28"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Страна           Номер СВХ                 Наименование владельца СВХ  \\\n","0  Россия  10009/011212/10043                             ООО \"ТАМАРИКС\"   \n","1  Россия  10113/171210/10034                    ООО \"РОСЛАВЛЬ-ТЕРМИНАЛ\"   \n","2  Россия  10115/071210/10029                    ООО \"ВОЛЖСКИЙ ТЕРМИНАЛ\"   \n","3  Россия  10115/101210/10026         ООО \"ТВЕРСКОЙ ТАМОЖЕННЫЙ ТЕРМИНАЛ\"   \n","4  Россия  10113/301110/10022  ООО \"СКЛАД ВРЕМЕННОГО ХРАНЕНИЯ \"ЕЛТРАНС+\"   \n","\n","             Местонахождение владельца СВХ, контакты       ИНН СВХ  \\\n","0  194292, Санкт-Петербург, пр. Культуры, д. 40, ...  7.811528e+09   \n","1  216500, Смоленская облласть, г. Рославль, ул. ...  6.725015e+09   \n","2                 170040, г.Тверь, Борихино поле, 17  6.904043e+09   \n","3            170000 Г.ТВЕРЬ, ВОЛОКОЛАМСКОЕ ШОССЕ, 49  6.904042e+09   \n","4  215805, Смоленская область, город Ярцево, ул. ...  6.730072e+09   \n","\n","   Площадь СВХ  Региональный таможенный орган  Издержки на КПП 1, руб.\\день  \\\n","0         7500                     10009000.0                   7333.333333   \n","1         8100                     10113000.0                   7333.333333   \n","2         4310                     10113000.0                   7333.333333   \n","3         5430                     10113000.0                   7333.333333   \n","4         6490                     10113000.0                   7333.333333   \n","\n","   Издержки на КПП 2, руб.\\день  Издержки на ДИСПЕТЧЕРСКАЯ, руб.\\день  ...  \\\n","0                        8000.0                               16800.0  ...   \n","1                        8000.0                               16800.0  ...   \n","2                        8000.0                               16800.0  ...   \n","3                        8000.0                               16800.0  ...   \n","4                        8000.0                               16800.0  ...   \n","\n","   ФОТ ДИСПЕТЧЕРСКОЙ\\месяц  Стоимость заезда товарной партии на СВХ  \\\n","0                 504000.0                                   9000.0   \n","1                 504000.0                                   9000.0   \n","2                 504000.0                                   9000.0   \n","3                 504000.0                                   9000.0   \n","4                 504000.0                                   9000.0   \n","\n","   Стоимость закупки и внедрения АСУ \"ВЕСЫ 1\"  \\\n","0                                     1800000   \n","1                                     1800000   \n","2                                     1800000   \n","3                                     1800000   \n","4                                     1800000   \n","\n","   Стоимость интегрированного ПО \"ВЕСЫ 1\" (мин пакет 10 рабочих мест)  \\\n","0                                             180000                    \n","1                                             180000                    \n","2                                             180000                    \n","3                                             180000                    \n","4                                             180000                    \n","\n","   Стоимость ежемесячного обслуживания \"ВЕСЫ 1\" (мин пакет 10 рабочих мест)  \\\n","0                                              15000                          \n","1                                              15000                          \n","2                                              15000                          \n","3                                              15000                          \n","4                                              15000                          \n","\n","   Срок окупаемости внедрения ПО/мес.  Unnamed: 22  Сокращение затрат  \\\n","0                            4.336957          NaN          5520000.0   \n","1                            4.336957          NaN                NaN   \n","2                            4.336957          NaN                NaN   \n","3                            4.336957          NaN                NaN   \n","4                            4.336957          NaN                NaN   \n","\n","   Эксплуатационные затраты за 1 год  Unnamed: 25  \n","0                           180000.0     0.391304  \n","1                                NaN          NaN  \n","2                                NaN          NaN  \n","3                                NaN          NaN  \n","4                                NaN          NaN  \n","\n","[5 rows x 26 columns]"],"text/html":["\n","  <div id=\"df-831741bf-2761-4963-a828-0a1467c53332\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Страна</th>\n","      <th>Номер СВХ</th>\n","      <th>Наименование владельца СВХ</th>\n","      <th>Местонахождение владельца СВХ, контакты</th>\n","      <th>ИНН СВХ</th>\n","      <th>Площадь СВХ</th>\n","      <th>Региональный таможенный орган</th>\n","      <th>Издержки на КПП 1, руб.\\день</th>\n","      <th>Издержки на КПП 2, руб.\\день</th>\n","      <th>Издержки на ДИСПЕТЧЕРСКАЯ, руб.\\день</th>\n","      <th>...</th>\n","      <th>ФОТ ДИСПЕТЧЕРСКОЙ\\месяц</th>\n","      <th>Стоимость заезда товарной партии на СВХ</th>\n","      <th>Стоимость закупки и внедрения АСУ \"ВЕСЫ 1\"</th>\n","      <th>Стоимость интегрированного ПО \"ВЕСЫ 1\" (мин пакет 10 рабочих мест)</th>\n","      <th>Стоимость ежемесячного обслуживания \"ВЕСЫ 1\" (мин пакет 10 рабочих мест)</th>\n","      <th>Срок окупаемости внедрения ПО/мес.</th>\n","      <th>Unnamed: 22</th>\n","      <th>Сокращение затрат</th>\n","      <th>Эксплуатационные затраты за 1 год</th>\n","      <th>Unnamed: 25</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Россия</td>\n","      <td>10009/011212/10043</td>\n","      <td>ООО \"ТАМАРИКС\"</td>\n","      <td>194292, Санкт-Петербург, пр. Культуры, д. 40, ...</td>\n","      <td>7.811528e+09</td>\n","      <td>7500</td>\n","      <td>10009000.0</td>\n","      <td>7333.333333</td>\n","      <td>8000.0</td>\n","      <td>16800.0</td>\n","      <td>...</td>\n","      <td>504000.0</td>\n","      <td>9000.0</td>\n","      <td>1800000</td>\n","      <td>180000</td>\n","      <td>15000</td>\n","      <td>4.336957</td>\n","      <td>NaN</td>\n","      <td>5520000.0</td>\n","      <td>180000.0</td>\n","      <td>0.391304</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Россия</td>\n","      <td>10113/171210/10034</td>\n","      <td>ООО \"РОСЛАВЛЬ-ТЕРМИНАЛ\"</td>\n","      <td>216500, Смоленская облласть, г. Рославль, ул. ...</td>\n","      <td>6.725015e+09</td>\n","      <td>8100</td>\n","      <td>10113000.0</td>\n","      <td>7333.333333</td>\n","      <td>8000.0</td>\n","      <td>16800.0</td>\n","      <td>...</td>\n","      <td>504000.0</td>\n","      <td>9000.0</td>\n","      <td>1800000</td>\n","      <td>180000</td>\n","      <td>15000</td>\n","      <td>4.336957</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Россия</td>\n","      <td>10115/071210/10029</td>\n","      <td>ООО \"ВОЛЖСКИЙ ТЕРМИНАЛ\"</td>\n","      <td>170040, г.Тверь, Борихино поле, 17</td>\n","      <td>6.904043e+09</td>\n","      <td>4310</td>\n","      <td>10113000.0</td>\n","      <td>7333.333333</td>\n","      <td>8000.0</td>\n","      <td>16800.0</td>\n","      <td>...</td>\n","      <td>504000.0</td>\n","      <td>9000.0</td>\n","      <td>1800000</td>\n","      <td>180000</td>\n","      <td>15000</td>\n","      <td>4.336957</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Россия</td>\n","      <td>10115/101210/10026</td>\n","      <td>ООО \"ТВЕРСКОЙ ТАМОЖЕННЫЙ ТЕРМИНАЛ\"</td>\n","      <td>170000 Г.ТВЕРЬ, ВОЛОКОЛАМСКОЕ ШОССЕ, 49</td>\n","      <td>6.904042e+09</td>\n","      <td>5430</td>\n","      <td>10113000.0</td>\n","      <td>7333.333333</td>\n","      <td>8000.0</td>\n","      <td>16800.0</td>\n","      <td>...</td>\n","      <td>504000.0</td>\n","      <td>9000.0</td>\n","      <td>1800000</td>\n","      <td>180000</td>\n","      <td>15000</td>\n","      <td>4.336957</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Россия</td>\n","      <td>10113/301110/10022</td>\n","      <td>ООО \"СКЛАД ВРЕМЕННОГО ХРАНЕНИЯ \"ЕЛТРАНС+\"</td>\n","      <td>215805, Смоленская область, город Ярцево, ул. ...</td>\n","      <td>6.730072e+09</td>\n","      <td>6490</td>\n","      <td>10113000.0</td>\n","      <td>7333.333333</td>\n","      <td>8000.0</td>\n","      <td>16800.0</td>\n","      <td>...</td>\n","      <td>504000.0</td>\n","      <td>9000.0</td>\n","      <td>1800000</td>\n","      <td>180000</td>\n","      <td>15000</td>\n","      <td>4.336957</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 26 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-831741bf-2761-4963-a828-0a1467c53332')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-831741bf-2761-4963-a828-0a1467c53332 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-831741bf-2761-4963-a828-0a1467c53332');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["data2.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":156},"id":"AmKFrsFQXWHf","executionInfo":{"status":"ok","timestamp":1682461561875,"user_tz":-180,"elapsed":21,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"3593e5c8-f925-4cb1-df0e-6e76bdce53b0"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Площадь СВХ  Стоимость закупки и внедрения АСУ \"ВЕСЫ 1\"  \\\n","0      >10100                                     2450000   \n","1     <=10100                                     1800000   \n","\n","   Стоимость интегрированного ПО \"ВЕСЫ 1\" (мин пакет 10 рабочих мест)  \\\n","0                                             180000                    \n","1                                             180000                    \n","\n","   Стоимость ежемесячного обслуживания \"ВЕСЫ 1\" (мин пакет 10 рабочих мест)  \n","0                                              15000                         \n","1                                              15000                         "],"text/html":["\n","  <div id=\"df-7e6f1043-a5ee-4cbf-91e7-5e01c04da258\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Площадь СВХ</th>\n","      <th>Стоимость закупки и внедрения АСУ \"ВЕСЫ 1\"</th>\n","      <th>Стоимость интегрированного ПО \"ВЕСЫ 1\" (мин пакет 10 рабочих мест)</th>\n","      <th>Стоимость ежемесячного обслуживания \"ВЕСЫ 1\" (мин пакет 10 рабочих мест)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>&gt;10100</td>\n","      <td>2450000</td>\n","      <td>180000</td>\n","      <td>15000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>&lt;=10100</td>\n","      <td>1800000</td>\n","      <td>180000</td>\n","      <td>15000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7e6f1043-a5ee-4cbf-91e7-5e01c04da258')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-7e6f1043-a5ee-4cbf-91e7-5e01c04da258 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-7e6f1043-a5ee-4cbf-91e7-5e01c04da258');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":6}]},{"cell_type":"markdown","source":["# Объединение данных в датасет"],"metadata":{"id":"7wlCzadiXYrz"}},{"cell_type":"markdown","source":["Необходимо объединить датасеты по признаку Площадь СВХ с условием"],"metadata":{"id":"LUvegnnuXbTd"}},{"cell_type":"code","source":["data[data2.columns[3]] = data2['Стоимость ежемесячного обслуживания \"ВЕСЫ 1\" (мин пакет 10 рабочих мест)'][1]\n","data[data2.columns[2]] = data2['Стоимость интегрированного ПО \"ВЕСЫ 1\" (мин пакет 10 рабочих мест)'][1]\n","data[data2.columns[1]] = data['Площадь СВХ'].apply(lambda x: data2['Стоимость закупки и внедрения АСУ \"ВЕСЫ 1\"'][0] if x > 10100 else data2['Стоимость закупки и внедрения АСУ \"ВЕСЫ 1\"'][1])\n","data.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"dcyeKgOtXcCh","executionInfo":{"status":"ok","timestamp":1682461561875,"user_tz":-180,"elapsed":20,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"8f378d2c-066d-4496-b477-8aaf3ad0cd82"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Страна           Номер СВХ                 Наименование владельца СВХ  \\\n","0  Россия  10009/011212/10043                             ООО \"ТАМАРИКС\"   \n","1  Россия  10113/171210/10034                    ООО \"РОСЛАВЛЬ-ТЕРМИНАЛ\"   \n","2  Россия  10115/071210/10029                    ООО \"ВОЛЖСКИЙ ТЕРМИНАЛ\"   \n","3  Россия  10115/101210/10026         ООО \"ТВЕРСКОЙ ТАМОЖЕННЫЙ ТЕРМИНАЛ\"   \n","4  Россия  10113/301110/10022  ООО \"СКЛАД ВРЕМЕННОГО ХРАНЕНИЯ \"ЕЛТРАНС+\"   \n","\n","             Местонахождение владельца СВХ, контакты       ИНН СВХ  \\\n","0  194292, Санкт-Петербург, пр. Культуры, д. 40, ...  7.811528e+09   \n","1  216500, Смоленская облласть, г. Рославль, ул. ...  6.725015e+09   \n","2                 170040, г.Тверь, Борихино поле, 17  6.904043e+09   \n","3            170000 Г.ТВЕРЬ, ВОЛОКОЛАМСКОЕ ШОССЕ, 49  6.904042e+09   \n","4  215805, Смоленская область, город Ярцево, ул. ...  6.730072e+09   \n","\n","   Площадь СВХ  Региональный таможенный орган  Издержки на КПП 1, руб.\\день  \\\n","0         7500                     10009000.0                   7333.333333   \n","1         8100                     10113000.0                   7333.333333   \n","2         4310                     10113000.0                   7333.333333   \n","3         5430                     10113000.0                   7333.333333   \n","4         6490                     10113000.0                   7333.333333   \n","\n","   Издержки на КПП 2, руб.\\день  Издержки на ДИСПЕТЧЕРСКАЯ, руб.\\день  ...  \\\n","0                        8000.0                               16800.0  ...   \n","1                        8000.0                               16800.0  ...   \n","2                        8000.0                               16800.0  ...   \n","3                        8000.0                               16800.0  ...   \n","4                        8000.0                               16800.0  ...   \n","\n","   ФОТ ДИСПЕТЧЕРСКОЙ\\месяц  Стоимость заезда товарной партии на СВХ  \\\n","0                 504000.0                                   9000.0   \n","1                 504000.0                                   9000.0   \n","2                 504000.0                                   9000.0   \n","3                 504000.0                                   9000.0   \n","4                 504000.0                                   9000.0   \n","\n","   Стоимость закупки и внедрения АСУ \"ВЕСЫ 1\"  \\\n","0                                     1800000   \n","1                                     1800000   \n","2                                     1800000   \n","3                                     1800000   \n","4                                     1800000   \n","\n","   Стоимость интегрированного ПО \"ВЕСЫ 1\" (мин пакет 10 рабочих мест)  \\\n","0                                             180000                    \n","1                                             180000                    \n","2                                             180000                    \n","3                                             180000                    \n","4                                             180000                    \n","\n","   Стоимость ежемесячного обслуживания \"ВЕСЫ 1\" (мин пакет 10 рабочих мест)  \\\n","0                                              15000                          \n","1                                              15000                          \n","2                                              15000                          \n","3                                              15000                          \n","4                                              15000                          \n","\n","   Срок окупаемости внедрения ПО/мес.  Unnamed: 22  Сокращение затрат  \\\n","0                            4.336957          NaN          5520000.0   \n","1                            4.336957          NaN                NaN   \n","2                            4.336957          NaN                NaN   \n","3                            4.336957          NaN                NaN   \n","4                            4.336957          NaN                NaN   \n","\n","   Эксплуатационные затраты за 1 год  Unnamed: 25  \n","0                           180000.0     0.391304  \n","1                                NaN          NaN  \n","2                                NaN          NaN  \n","3                                NaN          NaN  \n","4                                NaN          NaN  \n","\n","[5 rows x 26 columns]"],"text/html":["\n","  <div id=\"df-959683b3-0825-4df2-80b2-46fbb2ff5760\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Страна</th>\n","      <th>Номер СВХ</th>\n","      <th>Наименование владельца СВХ</th>\n","      <th>Местонахождение владельца СВХ, контакты</th>\n","      <th>ИНН СВХ</th>\n","      <th>Площадь СВХ</th>\n","      <th>Региональный таможенный орган</th>\n","      <th>Издержки на КПП 1, руб.\\день</th>\n","      <th>Издержки на КПП 2, руб.\\день</th>\n","      <th>Издержки на ДИСПЕТЧЕРСКАЯ, руб.\\день</th>\n","      <th>...</th>\n","      <th>ФОТ ДИСПЕТЧЕРСКОЙ\\месяц</th>\n","      <th>Стоимость заезда товарной партии на СВХ</th>\n","      <th>Стоимость закупки и внедрения АСУ \"ВЕСЫ 1\"</th>\n","      <th>Стоимость интегрированного ПО \"ВЕСЫ 1\" (мин пакет 10 рабочих мест)</th>\n","      <th>Стоимость ежемесячного обслуживания \"ВЕСЫ 1\" (мин пакет 10 рабочих мест)</th>\n","      <th>Срок окупаемости внедрения ПО/мес.</th>\n","      <th>Unnamed: 22</th>\n","      <th>Сокращение затрат</th>\n","      <th>Эксплуатационные затраты за 1 год</th>\n","      <th>Unnamed: 25</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Россия</td>\n","      <td>10009/011212/10043</td>\n","      <td>ООО \"ТАМАРИКС\"</td>\n","      <td>194292, Санкт-Петербург, пр. Культуры, д. 40, ...</td>\n","      <td>7.811528e+09</td>\n","      <td>7500</td>\n","      <td>10009000.0</td>\n","      <td>7333.333333</td>\n","      <td>8000.0</td>\n","      <td>16800.0</td>\n","      <td>...</td>\n","      <td>504000.0</td>\n","      <td>9000.0</td>\n","      <td>1800000</td>\n","      <td>180000</td>\n","      <td>15000</td>\n","      <td>4.336957</td>\n","      <td>NaN</td>\n","      <td>5520000.0</td>\n","      <td>180000.0</td>\n","      <td>0.391304</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Россия</td>\n","      <td>10113/171210/10034</td>\n","      <td>ООО \"РОСЛАВЛЬ-ТЕРМИНАЛ\"</td>\n","      <td>216500, Смоленская облласть, г. Рославль, ул. ...</td>\n","      <td>6.725015e+09</td>\n","      <td>8100</td>\n","      <td>10113000.0</td>\n","      <td>7333.333333</td>\n","      <td>8000.0</td>\n","      <td>16800.0</td>\n","      <td>...</td>\n","      <td>504000.0</td>\n","      <td>9000.0</td>\n","      <td>1800000</td>\n","      <td>180000</td>\n","      <td>15000</td>\n","      <td>4.336957</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Россия</td>\n","      <td>10115/071210/10029</td>\n","      <td>ООО \"ВОЛЖСКИЙ ТЕРМИНАЛ\"</td>\n","      <td>170040, г.Тверь, Борихино поле, 17</td>\n","      <td>6.904043e+09</td>\n","      <td>4310</td>\n","      <td>10113000.0</td>\n","      <td>7333.333333</td>\n","      <td>8000.0</td>\n","      <td>16800.0</td>\n","      <td>...</td>\n","      <td>504000.0</td>\n","      <td>9000.0</td>\n","      <td>1800000</td>\n","      <td>180000</td>\n","      <td>15000</td>\n","      <td>4.336957</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Россия</td>\n","      <td>10115/101210/10026</td>\n","      <td>ООО \"ТВЕРСКОЙ ТАМОЖЕННЫЙ ТЕРМИНАЛ\"</td>\n","      <td>170000 Г.ТВЕРЬ, ВОЛОКОЛАМСКОЕ ШОССЕ, 49</td>\n","      <td>6.904042e+09</td>\n","      <td>5430</td>\n","      <td>10113000.0</td>\n","      <td>7333.333333</td>\n","      <td>8000.0</td>\n","      <td>16800.0</td>\n","      <td>...</td>\n","      <td>504000.0</td>\n","      <td>9000.0</td>\n","      <td>1800000</td>\n","      <td>180000</td>\n","      <td>15000</td>\n","      <td>4.336957</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Россия</td>\n","      <td>10113/301110/10022</td>\n","      <td>ООО \"СКЛАД ВРЕМЕННОГО ХРАНЕНИЯ \"ЕЛТРАНС+\"</td>\n","      <td>215805, Смоленская область, город Ярцево, ул. ...</td>\n","      <td>6.730072e+09</td>\n","      <td>6490</td>\n","      <td>10113000.0</td>\n","      <td>7333.333333</td>\n","      <td>8000.0</td>\n","      <td>16800.0</td>\n","      <td>...</td>\n","      <td>504000.0</td>\n","      <td>9000.0</td>\n","      <td>1800000</td>\n","      <td>180000</td>\n","      <td>15000</td>\n","      <td>4.336957</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 26 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-959683b3-0825-4df2-80b2-46fbb2ff5760')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-959683b3-0825-4df2-80b2-46fbb2ff5760 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-959683b3-0825-4df2-80b2-46fbb2ff5760');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":7}]},{"cell_type":"markdown","source":["Проверка корректности"],"metadata":{"id":"guAdfXeuXlNC"}},{"cell_type":"code","source":["print((data[data['Площадь СВХ'] > 10100]['Стоимость закупки и внедрения АСУ \"ВЕСЫ 1\"'] == 2450000).all())\n","print((data[data['Площадь СВХ'] <= 10100]['Стоимость закупки и внедрения АСУ \"ВЕСЫ 1\"'] == 1800000).all())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Dj1dT2OEXlnD","executionInfo":{"status":"ok","timestamp":1682461561875,"user_tz":-180,"elapsed":19,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"f6a62ee3-01b8-44ff-fb12-ac0cc0e50387"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["True\n","True\n"]}]},{"cell_type":"markdown","source":["# Предобработка и разведочный анализ данных"],"metadata":{"id":"MbN3wxUgXsVX"}},{"cell_type":"markdown","source":["Посмотрим на данные - признаки, их типы, количество"],"metadata":{"id":"6aC7XKcDYOYo"}},{"cell_type":"code","source":["data.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JjFmZ3gxYQVS","executionInfo":{"status":"ok","timestamp":1682461561876,"user_tz":-180,"elapsed":15,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"1c1dede3-37a1-44b9-a020-4e7eac4bf638"},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(541, 26)"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["data.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wVR9xG0iYQ5x","executionInfo":{"status":"ok","timestamp":1682461561876,"user_tz":-180,"elapsed":15,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"b5315663-0fb2-42a8-fbd6-2bc61bb100c6"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 541 entries, 0 to 540\n","Data columns (total 26 columns):\n"," #   Column                                                                    Non-Null Count  Dtype  \n","---  ------                                                                    --------------  -----  \n"," 0   Страна                                                                    540 non-null    object \n"," 1   Номер СВХ                                                                 540 non-null    object \n"," 2   Наименование владельца СВХ                                                540 non-null    object \n"," 3   Местонахождение владельца СВХ, контакты                                   541 non-null    object \n"," 4   ИНН СВХ                                                                   540 non-null    float64\n"," 5   Площадь СВХ                                                               541 non-null    int64  \n"," 6   Региональный таможенный орган                                             540 non-null    float64\n"," 7   Издержки на КПП 1, руб.\\день                                              541 non-null    float64\n"," 8   Издержки на КПП 2, руб.\\день                                              541 non-null    float64\n"," 9   Издержки на ДИСПЕТЧЕРСКАЯ, руб.\\день                                      541 non-null    float64\n"," 10  Количество сотрудников КПП 1                                              541 non-null    int64  \n"," 11  Количество сотрудников КПП 2                                              541 non-null    int64  \n"," 12  Количество сотрудников Диспетчерской                                      541 non-null    int64  \n"," 13  Среднее количество товарных партий, поступающих на склад в день           541 non-null    int64  \n"," 14  ФОТ КПП 1\\месяц                                                           540 non-null    float64\n"," 15  ФОТ КПП 2\\месяц                                                           540 non-null    float64\n"," 16  ФОТ ДИСПЕТЧЕРСКОЙ\\месяц                                                   540 non-null    float64\n"," 17  Стоимость заезда товарной партии на СВХ                                   540 non-null    float64\n"," 18  Стоимость закупки и внедрения АСУ \"ВЕСЫ 1\"                                541 non-null    int64  \n"," 19  Стоимость интегрированного ПО \"ВЕСЫ 1\" (мин пакет 10 рабочих мест)        541 non-null    int64  \n"," 20  Стоимость ежемесячного обслуживания \"ВЕСЫ 1\" (мин пакет 10 рабочих мест)  541 non-null    int64  \n"," 21  Срок окупаемости внедрения ПО/мес.                                        541 non-null    object \n"," 22  Unnamed: 22                                                               0 non-null      float64\n"," 23  Сокращение затрат                                                         1 non-null      float64\n"," 24  Эксплуатационные затраты за 1 год                                         1 non-null      float64\n"," 25  Unnamed: 25                                                               1 non-null      float64\n","dtypes: float64(13), int64(8), object(5)\n","memory usage: 110.0+ KB\n"]}]},{"cell_type":"markdown","source":["Посмотрим уникальность значений в колонках"],"metadata":{"id":"cSyGcTFwYXo_"}},{"cell_type":"code","source":["for column in data.columns:\n","    print(f'Колонка {column}: количество уникальных значений: {len(data[column].unique())}')\n","    print(data[column].unique()[:5])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"stz_D32AYZzT","executionInfo":{"status":"ok","timestamp":1682461562469,"user_tz":-180,"elapsed":604,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"e0766708-ad7b-402e-92e8-8bd044833740"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Колонка Страна: количество уникальных значений: 2\n","['Россия' nan]\n","Колонка Номер СВХ: количество уникальных значений: 539\n","['10009/011212/10043' '10113/171210/10034' '10115/071210/10029'\n"," '10115/101210/10026' '10113/301110/10022']\n","Колонка Наименование владельца СВХ: количество уникальных значений: 501\n","['ООО \"ТАМАРИКС\"' 'ООО \"РОСЛАВЛЬ-ТЕРМИНАЛ\"' 'ООО \"ВОЛЖСКИЙ ТЕРМИНАЛ\"'\n"," 'ООО \"ТВЕРСКОЙ ТАМОЖЕННЫЙ ТЕРМИНАЛ\"'\n"," 'ООО \"СКЛАД ВРЕМЕННОГО ХРАНЕНИЯ \"ЕЛТРАНС+\"']\n","Колонка Местонахождение владельца СВХ, контакты: количество уникальных значений: 518\n","['194292, Санкт-Петербург, пр. Культуры, д. 40, литер А'\n"," '216500, Смоленская облласть, г. Рославль, ул. Карла Маркса, дом 166'\n"," '170040, г.Тверь, Борихино поле, 17'\n"," '170000 Г.ТВЕРЬ, ВОЛОКОЛАМСКОЕ ШОССЕ, 49'\n"," '215805, Смоленская область, город Ярцево, ул. 2-ая Машиностроительная, строение 5/3']\n","Колонка ИНН СВХ: количество уникальных значений: 489\n","[7.81152756e+09 6.72501541e+09 6.90404306e+09 6.90404233e+09\n"," 6.73007226e+09]\n","Колонка Площадь СВХ: количество уникальных значений: 525\n","[7500 8100 4310 5430 6490]\n","Колонка Региональный таможенный орган: количество уникальных значений: 59\n","[10009000. 10113000. 10116000. 10103000. 10014000.]\n","Колонка Издержки на КПП 1, руб.\\день: количество уникальных значений: 10\n","[ 7333.33333333 11000.          6000.          9000.\n","  4500.        ]\n","Колонка Издержки на КПП 2, руб.\\день: количество уникальных значений: 11\n","[ 8000.         12000.         16000.          6666.66666667\n"," 10000.        ]\n","Колонка Издержки на ДИСПЕТЧЕРСКАЯ, руб.\\день: количество уникальных значений: 13\n","[16800.         28000.         33600.         15333.2\n"," 25555.33333333]\n","Колонка Количество сотрудников КПП 1: количество уникальных значений: 3\n","[4 6 3]\n","Колонка Количество сотрудников КПП 2: количество уникальных значений: 4\n","[4 6 8 3]\n","Колонка Количество сотрудников Диспетчерской: количество уникальных значений: 4\n","[ 6 10 12  4]\n","Колонка Среднее количество товарных партий, поступающих на склад в день: количество уникальных значений: 80\n","[41 87 94 56 86]\n","Колонка ФОТ КПП 1\\месяц: количество уникальных значений: 10\n","[220000. 330000. 180000. 270000. 135000.]\n","Колонка ФОТ КПП 2\\месяц: количество уникальных значений: 11\n","[240000. 360000. 480000. 200000. 300000.]\n","Колонка ФОТ ДИСПЕТЧЕРСКОЙ\\месяц: количество уникальных значений: 13\n","[ 504000.  840000. 1008000.  459996.  766660.]\n","Колонка Стоимость заезда товарной партии на СВХ: количество уникальных значений: 5\n","[9000. 8500. 5500.   nan 7000.]\n","Колонка Стоимость закупки и внедрения АСУ \"ВЕСЫ 1\": количество уникальных значений: 2\n","[1800000 2450000]\n","Колонка Стоимость интегрированного ПО \"ВЕСЫ 1\" (мин пакет 10 рабочих мест): количество уникальных значений: 1\n","[180000]\n","Колонка Стоимость ежемесячного обслуживания \"ВЕСЫ 1\" (мин пакет 10 рабочих мест): количество уникальных значений: 1\n","[15000]\n","Колонка Срок окупаемости внедрения ПО/мес.: количество уникальных значений: 16\n","[4.336956522 2.891304348 3.287654321 3.833333333 5.25]\n","Колонка Unnamed: 22: количество уникальных значений: 1\n","[nan]\n","Колонка Сокращение затрат: количество уникальных значений: 2\n","[5520000.      nan]\n","Колонка Эксплуатационные затраты за 1 год: количество уникальных значений: 2\n","[180000.     nan]\n","Колонка Unnamed: 25: количество уникальных значений: 2\n","[0.39130435        nan]\n"]}]},{"cell_type":"markdown","source":["Проверим данные на полноту"],"metadata":{"id":"7ttFn21SYduk"}},{"cell_type":"code","source":["data.isna().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DxrXkxLyYlSg","executionInfo":{"status":"ok","timestamp":1682461562469,"user_tz":-180,"elapsed":46,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"2df817cd-aae1-454e-d471-243cc60ef8c9"},"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Страна                                                                        1\n","Номер СВХ                                                                     1\n","Наименование владельца СВХ                                                    1\n","Местонахождение владельца СВХ, контакты                                       0\n","ИНН СВХ                                                                       1\n","Площадь СВХ                                                                   0\n","Региональный таможенный орган                                                 1\n","Издержки на КПП 1, руб.\\день                                                  0\n","Издержки на КПП 2, руб.\\день                                                  0\n","Издержки на ДИСПЕТЧЕРСКАЯ, руб.\\день                                          0\n","Количество сотрудников КПП 1                                                  0\n","Количество сотрудников КПП 2                                                  0\n","Количество сотрудников Диспетчерской                                          0\n","Среднее количество товарных партий, поступающих на склад в день               0\n","ФОТ КПП 1\\месяц                                                               1\n","ФОТ КПП 2\\месяц                                                               1\n","ФОТ ДИСПЕТЧЕРСКОЙ\\месяц                                                       1\n","Стоимость заезда товарной партии на СВХ                                       1\n","Стоимость закупки и внедрения АСУ \"ВЕСЫ 1\"                                    0\n","Стоимость интегрированного ПО \"ВЕСЫ 1\" (мин пакет 10 рабочих мест)            0\n","Стоимость ежемесячного обслуживания \"ВЕСЫ 1\" (мин пакет 10 рабочих мест)      0\n","Срок окупаемости внедрения ПО/мес.                                            0\n","Unnamed: 22                                                                 541\n","Сокращение затрат                                                           540\n","Эксплуатационные затраты за 1 год                                           540\n","Unnamed: 25                                                                 540\n","dtype: int64"]},"metadata":{},"execution_count":12}]},{"cell_type":"markdown","source":["Данные не полные. Для корректной работы подели надо удалить 4 последних столбца и строки с пропущенными значениями."],"metadata":{"id":"ShV6VcOFYpCI"}},{"cell_type":"code","source":["data.columns[-4:]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4doGFFivYrXY","executionInfo":{"status":"ok","timestamp":1682461562470,"user_tz":-180,"elapsed":41,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"e4aa308e-d71b-48c8-f103-b31ff0ae4812"},"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['Unnamed: 22', 'Сокращение затрат', 'Эксплуатационные затраты за 1 год',\n","       'Unnamed: 25'],\n","      dtype='object')"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["data = data.drop(list(data.columns[-4:]), axis = 1)\n","data.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":629},"id":"O31Mo1fuYt6w","executionInfo":{"status":"ok","timestamp":1682461562470,"user_tz":-180,"elapsed":38,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"e2800396-3bce-43e3-c2eb-676dabe80541"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Страна           Номер СВХ                 Наименование владельца СВХ  \\\n","0  Россия  10009/011212/10043                             ООО \"ТАМАРИКС\"   \n","1  Россия  10113/171210/10034                    ООО \"РОСЛАВЛЬ-ТЕРМИНАЛ\"   \n","2  Россия  10115/071210/10029                    ООО \"ВОЛЖСКИЙ ТЕРМИНАЛ\"   \n","3  Россия  10115/101210/10026         ООО \"ТВЕРСКОЙ ТАМОЖЕННЫЙ ТЕРМИНАЛ\"   \n","4  Россия  10113/301110/10022  ООО \"СКЛАД ВРЕМЕННОГО ХРАНЕНИЯ \"ЕЛТРАНС+\"   \n","\n","             Местонахождение владельца СВХ, контакты       ИНН СВХ  \\\n","0  194292, Санкт-Петербург, пр. Культуры, д. 40, ...  7.811528e+09   \n","1  216500, Смоленская облласть, г. Рославль, ул. ...  6.725015e+09   \n","2                 170040, г.Тверь, Борихино поле, 17  6.904043e+09   \n","3            170000 Г.ТВЕРЬ, ВОЛОКОЛАМСКОЕ ШОССЕ, 49  6.904042e+09   \n","4  215805, Смоленская область, город Ярцево, ул. ...  6.730072e+09   \n","\n","   Площадь СВХ  Региональный таможенный орган  Издержки на КПП 1, руб.\\день  \\\n","0         7500                     10009000.0                   7333.333333   \n","1         8100                     10113000.0                   7333.333333   \n","2         4310                     10113000.0                   7333.333333   \n","3         5430                     10113000.0                   7333.333333   \n","4         6490                     10113000.0                   7333.333333   \n","\n","   Издержки на КПП 2, руб.\\день  Издержки на ДИСПЕТЧЕРСКАЯ, руб.\\день  ...  \\\n","0                        8000.0                               16800.0  ...   \n","1                        8000.0                               16800.0  ...   \n","2                        8000.0                               16800.0  ...   \n","3                        8000.0                               16800.0  ...   \n","4                        8000.0                               16800.0  ...   \n","\n","   Количество сотрудников Диспетчерской  \\\n","0                                     6   \n","1                                     6   \n","2                                     6   \n","3                                     6   \n","4                                     6   \n","\n","   Среднее количество товарных партий, поступающих на склад в день  \\\n","0                                                 41                 \n","1                                                 87                 \n","2                                                 94                 \n","3                                                 56                 \n","4                                                 86                 \n","\n","   ФОТ КПП 1\\месяц  ФОТ КПП 2\\месяц  ФОТ ДИСПЕТЧЕРСКОЙ\\месяц  \\\n","0         220000.0         240000.0                 504000.0   \n","1         220000.0         240000.0                 504000.0   \n","2         220000.0         240000.0                 504000.0   \n","3         220000.0         240000.0                 504000.0   \n","4         220000.0         240000.0                 504000.0   \n","\n","   Стоимость заезда товарной партии на СВХ  \\\n","0                                   9000.0   \n","1                                   9000.0   \n","2                                   9000.0   \n","3                                   9000.0   \n","4                                   9000.0   \n","\n","   Стоимость закупки и внедрения АСУ \"ВЕСЫ 1\"  \\\n","0                                     1800000   \n","1                                     1800000   \n","2                                     1800000   \n","3                                     1800000   \n","4                                     1800000   \n","\n","   Стоимость интегрированного ПО \"ВЕСЫ 1\" (мин пакет 10 рабочих мест)  \\\n","0                                             180000                    \n","1                                             180000                    \n","2                                             180000                    \n","3                                             180000                    \n","4                                             180000                    \n","\n","   Стоимость ежемесячного обслуживания \"ВЕСЫ 1\" (мин пакет 10 рабочих мест)  \\\n","0                                              15000                          \n","1                                              15000                          \n","2                                              15000                          \n","3                                              15000                          \n","4                                              15000                          \n","\n","   Срок окупаемости внедрения ПО/мес.  \n","0                            4.336957  \n","1                            4.336957  \n","2                            4.336957  \n","3                            4.336957  \n","4                            4.336957  \n","\n","[5 rows x 22 columns]"],"text/html":["\n","  <div id=\"df-bb193c77-0eee-4945-a2ac-1b0fc4dca033\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Страна</th>\n","      <th>Номер СВХ</th>\n","      <th>Наименование владельца СВХ</th>\n","      <th>Местонахождение владельца СВХ, контакты</th>\n","      <th>ИНН СВХ</th>\n","      <th>Площадь СВХ</th>\n","      <th>Региональный таможенный орган</th>\n","      <th>Издержки на КПП 1, руб.\\день</th>\n","      <th>Издержки на КПП 2, руб.\\день</th>\n","      <th>Издержки на ДИСПЕТЧЕРСКАЯ, руб.\\день</th>\n","      <th>...</th>\n","      <th>Количество сотрудников Диспетчерской</th>\n","      <th>Среднее количество товарных партий, поступающих на склад в день</th>\n","      <th>ФОТ КПП 1\\месяц</th>\n","      <th>ФОТ КПП 2\\месяц</th>\n","      <th>ФОТ ДИСПЕТЧЕРСКОЙ\\месяц</th>\n","      <th>Стоимость заезда товарной партии на СВХ</th>\n","      <th>Стоимость закупки и внедрения АСУ \"ВЕСЫ 1\"</th>\n","      <th>Стоимость интегрированного ПО \"ВЕСЫ 1\" (мин пакет 10 рабочих мест)</th>\n","      <th>Стоимость ежемесячного обслуживания \"ВЕСЫ 1\" (мин пакет 10 рабочих мест)</th>\n","      <th>Срок окупаемости внедрения ПО/мес.</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Россия</td>\n","      <td>10009/011212/10043</td>\n","      <td>ООО \"ТАМАРИКС\"</td>\n","      <td>194292, Санкт-Петербург, пр. Культуры, д. 40, ...</td>\n","      <td>7.811528e+09</td>\n","      <td>7500</td>\n","      <td>10009000.0</td>\n","      <td>7333.333333</td>\n","      <td>8000.0</td>\n","      <td>16800.0</td>\n","      <td>...</td>\n","      <td>6</td>\n","      <td>41</td>\n","      <td>220000.0</td>\n","      <td>240000.0</td>\n","      <td>504000.0</td>\n","      <td>9000.0</td>\n","      <td>1800000</td>\n","      <td>180000</td>\n","      <td>15000</td>\n","      <td>4.336957</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Россия</td>\n","      <td>10113/171210/10034</td>\n","      <td>ООО \"РОСЛАВЛЬ-ТЕРМИНАЛ\"</td>\n","      <td>216500, Смоленская облласть, г. Рославль, ул. ...</td>\n","      <td>6.725015e+09</td>\n","      <td>8100</td>\n","      <td>10113000.0</td>\n","      <td>7333.333333</td>\n","      <td>8000.0</td>\n","      <td>16800.0</td>\n","      <td>...</td>\n","      <td>6</td>\n","      <td>87</td>\n","      <td>220000.0</td>\n","      <td>240000.0</td>\n","      <td>504000.0</td>\n","      <td>9000.0</td>\n","      <td>1800000</td>\n","      <td>180000</td>\n","      <td>15000</td>\n","      <td>4.336957</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Россия</td>\n","      <td>10115/071210/10029</td>\n","      <td>ООО \"ВОЛЖСКИЙ ТЕРМИНАЛ\"</td>\n","      <td>170040, г.Тверь, Борихино поле, 17</td>\n","      <td>6.904043e+09</td>\n","      <td>4310</td>\n","      <td>10113000.0</td>\n","      <td>7333.333333</td>\n","      <td>8000.0</td>\n","      <td>16800.0</td>\n","      <td>...</td>\n","      <td>6</td>\n","      <td>94</td>\n","      <td>220000.0</td>\n","      <td>240000.0</td>\n","      <td>504000.0</td>\n","      <td>9000.0</td>\n","      <td>1800000</td>\n","      <td>180000</td>\n","      <td>15000</td>\n","      <td>4.336957</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Россия</td>\n","      <td>10115/101210/10026</td>\n","      <td>ООО \"ТВЕРСКОЙ ТАМОЖЕННЫЙ ТЕРМИНАЛ\"</td>\n","      <td>170000 Г.ТВЕРЬ, ВОЛОКОЛАМСКОЕ ШОССЕ, 49</td>\n","      <td>6.904042e+09</td>\n","      <td>5430</td>\n","      <td>10113000.0</td>\n","      <td>7333.333333</td>\n","      <td>8000.0</td>\n","      <td>16800.0</td>\n","      <td>...</td>\n","      <td>6</td>\n","      <td>56</td>\n","      <td>220000.0</td>\n","      <td>240000.0</td>\n","      <td>504000.0</td>\n","      <td>9000.0</td>\n","      <td>1800000</td>\n","      <td>180000</td>\n","      <td>15000</td>\n","      <td>4.336957</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Россия</td>\n","      <td>10113/301110/10022</td>\n","      <td>ООО \"СКЛАД ВРЕМЕННОГО ХРАНЕНИЯ \"ЕЛТРАНС+\"</td>\n","      <td>215805, Смоленская область, город Ярцево, ул. ...</td>\n","      <td>6.730072e+09</td>\n","      <td>6490</td>\n","      <td>10113000.0</td>\n","      <td>7333.333333</td>\n","      <td>8000.0</td>\n","      <td>16800.0</td>\n","      <td>...</td>\n","      <td>6</td>\n","      <td>86</td>\n","      <td>220000.0</td>\n","      <td>240000.0</td>\n","      <td>504000.0</td>\n","      <td>9000.0</td>\n","      <td>1800000</td>\n","      <td>180000</td>\n","      <td>15000</td>\n","      <td>4.336957</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 22 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bb193c77-0eee-4945-a2ac-1b0fc4dca033')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-bb193c77-0eee-4945-a2ac-1b0fc4dca033 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-bb193c77-0eee-4945-a2ac-1b0fc4dca033');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["data.isna().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"m8ha5no9YxIH","executionInfo":{"status":"ok","timestamp":1682461562470,"user_tz":-180,"elapsed":36,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"58b7762c-0ce7-4f4e-f82d-bd6c04724285"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Страна                                                                      1\n","Номер СВХ                                                                   1\n","Наименование владельца СВХ                                                  1\n","Местонахождение владельца СВХ, контакты                                     0\n","ИНН СВХ                                                                     1\n","Площадь СВХ                                                                 0\n","Региональный таможенный орган                                               1\n","Издержки на КПП 1, руб.\\день                                                0\n","Издержки на КПП 2, руб.\\день                                                0\n","Издержки на ДИСПЕТЧЕРСКАЯ, руб.\\день                                        0\n","Количество сотрудников КПП 1                                                0\n","Количество сотрудников КПП 2                                                0\n","Количество сотрудников Диспетчерской                                        0\n","Среднее количество товарных партий, поступающих на склад в день             0\n","ФОТ КПП 1\\месяц                                                             1\n","ФОТ КПП 2\\месяц                                                             1\n","ФОТ ДИСПЕТЧЕРСКОЙ\\месяц                                                     1\n","Стоимость заезда товарной партии на СВХ                                     1\n","Стоимость закупки и внедрения АСУ \"ВЕСЫ 1\"                                  0\n","Стоимость интегрированного ПО \"ВЕСЫ 1\" (мин пакет 10 рабочих мест)          0\n","Стоимость ежемесячного обслуживания \"ВЕСЫ 1\" (мин пакет 10 рабочих мест)    0\n","Срок окупаемости внедрения ПО/мес.                                          0\n","dtype: int64"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["data = data.dropna()\n","data.isna().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NVMNLs7UY8u0","executionInfo":{"status":"ok","timestamp":1682461562470,"user_tz":-180,"elapsed":34,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"c177f47a-5f35-41a3-df27-b70aec2cf587"},"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Страна                                                                      0\n","Номер СВХ                                                                   0\n","Наименование владельца СВХ                                                  0\n","Местонахождение владельца СВХ, контакты                                     0\n","ИНН СВХ                                                                     0\n","Площадь СВХ                                                                 0\n","Региональный таможенный орган                                               0\n","Издержки на КПП 1, руб.\\день                                                0\n","Издержки на КПП 2, руб.\\день                                                0\n","Издержки на ДИСПЕТЧЕРСКАЯ, руб.\\день                                        0\n","Количество сотрудников КПП 1                                                0\n","Количество сотрудников КПП 2                                                0\n","Количество сотрудников Диспетчерской                                        0\n","Среднее количество товарных партий, поступающих на склад в день             0\n","ФОТ КПП 1\\месяц                                                             0\n","ФОТ КПП 2\\месяц                                                             0\n","ФОТ ДИСПЕТЧЕРСКОЙ\\месяц                                                     0\n","Стоимость заезда товарной партии на СВХ                                     0\n","Стоимость закупки и внедрения АСУ \"ВЕСЫ 1\"                                  0\n","Стоимость интегрированного ПО \"ВЕСЫ 1\" (мин пакет 10 рабочих мест)          0\n","Стоимость ежемесячного обслуживания \"ВЕСЫ 1\" (мин пакет 10 рабочих мест)    0\n","Срок окупаемости внедрения ПО/мес.                                          0\n","dtype: int64"]},"metadata":{},"execution_count":16}]},{"cell_type":"markdown","source":["Проверим данные на дубликаты"],"metadata":{"id":"7P15SpPEZAQg"}},{"cell_type":"code","source":["data.drop_duplicates().shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"b09ALslWZCBw","executionInfo":{"status":"ok","timestamp":1682461562470,"user_tz":-180,"elapsed":32,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"7999cd8b-9b03-4a8a-94b6-176532010755"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(540, 22)"]},"metadata":{},"execution_count":17}]},{"cell_type":"markdown","source":["Дубликатов нет"],"metadata":{"id":"ElbyMd4gZNIm"}},{"cell_type":"markdown","source":["### Обработка числовых признаков"],"metadata":{"id":"G6jRrMKQZQZC"}},{"cell_type":"markdown","source":["Проверим на битые строки"],"metadata":{"id":"kkrJlzLYZZGT"}},{"cell_type":"code","source":["data['Срок окупаемости внедрения ПО/мес.'].unique()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Az2M7JEkZnfH","executionInfo":{"status":"ok","timestamp":1682461562471,"user_tz":-180,"elapsed":30,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"0abd2339-aa57-4d9b-b979-b024410de457"},"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([4.336956522, 2.891304348, 3.287654321, 3.833333333, 5.25, 3.5, 7,\n","       4.640350877, 3.974626866, 5.867647059, 4.438333333, 5.18627451,\n","       7.823529412, 3.911764706, 5.782608696], dtype=object)"]},"metadata":{},"execution_count":18}]},{"cell_type":"markdown","source":["Их нет"],"metadata":{"id":"jInqY5v5ZwJf"}},{"cell_type":"markdown","source":["21 признак является объектом хотя должен быть числом, исправим это"],"metadata":{"id":"J-Jzwd9mZWay"}},{"cell_type":"code","source":["data['Срок окупаемости внедрения ПО/мес.'] = data['Срок окупаемости внедрения ПО/мес.'].apply(float)"],"metadata":{"id":"qmtvqne6Zw9A","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1682461562471,"user_tz":-180,"elapsed":28,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"fe31a5b1-8410-4138-dc83-d75a4dafea72"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-19-a13fa80384d4>:1: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  data['Срок окупаемости внедрения ПО/мес.'] = data['Срок окупаемости внедрения ПО/мес.'].apply(float)\n"]}]},{"cell_type":"markdown","source":["Извлечение числовых признаков"],"metadata":{"id":"XSFMlCB-Z-Ml"}},{"cell_type":"code","source":["num_col = ['Площадь СВХ', 'Издержки на КПП 1, руб.\\день', 'Издержки на КПП 2, руб.\\день', 'Издержки на ДИСПЕТЧЕРСКАЯ, руб.\\день', 'Количество сотрудников КПП 1', 'Количество сотрудников КПП 2', 'Количество сотрудников Диспетчерской', 'Среднее количество товарных партий, поступающих на склад в день', 'ФОТ КПП 1\\месяц', 'ФОТ КПП 2\\месяц','ФОТ ДИСПЕТЧЕРСКОЙ\\месяц',  'Стоимость заезда товарной партии на СВХ','Стоимость ежемесячного обслуживания \"ВЕСЫ 1\" (мин пакет 10 рабочих мест)',\t'Стоимость интегрированного ПО \"ВЕСЫ 1\" (мин пакет 10 рабочих мест)', 'Стоимость закупки и внедрения АСУ \"ВЕСЫ 1\"', 'Срок окупаемости внедрения ПО/мес.']"],"metadata":{"id":"P-JvKpfMaAnn","executionInfo":{"status":"ok","timestamp":1682461562472,"user_tz":-180,"elapsed":26,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}}},"execution_count":20,"outputs":[]},{"cell_type":"markdown","source":["Основные характеристики числовых признаков"],"metadata":{"id":"S-lv5fnsaPKY"}},{"cell_type":"code","source":["data[num_col].describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":468},"id":"B_xhnyMmaP6G","executionInfo":{"status":"ok","timestamp":1682461562975,"user_tz":-180,"elapsed":528,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"1bb6a3c3-36c0-470d-dd97-574198317330"},"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        Площадь СВХ  Издержки на КПП 1, руб.\\день  \\\n","count    540.000000                    540.000000   \n","mean    7746.818519                   7041.358025   \n","std     3966.232491                   1910.822988   \n","min     1202.000000                   4000.000000   \n","25%     4380.250000                   5333.333333   \n","50%     7509.000000                   7333.333333   \n","75%    10972.000000                   8000.000000   \n","max    18092.000000                  11000.000000   \n","\n","       Издержки на КПП 2, руб.\\день  Издержки на ДИСПЕТЧЕРСКАЯ, руб.\\день  \\\n","count                    540.000000                            540.000000   \n","mean                    7966.358025                          17947.908148   \n","std                     2334.271811                           6004.131575   \n","min                     4500.000000                           8666.666667   \n","25%                     6000.000000                          13000.000000   \n","50%                     8000.000000                          16800.000000   \n","75%                     9000.000000                          21666.666667   \n","max                    16000.000000                          33600.000000   \n","\n","       Количество сотрудников КПП 1  Количество сотрудников КПП 2  \\\n","count                    540.000000                    540.000000   \n","mean                       4.635185                      4.727778   \n","std                        1.109189                      1.288585   \n","min                        3.000000                      3.000000   \n","25%                        4.000000                      4.000000   \n","50%                        4.000000                      4.000000   \n","75%                        6.000000                      6.000000   \n","max                        6.000000                      8.000000   \n","\n","       Количество сотрудников Диспетчерской  \\\n","count                            540.000000   \n","mean                               7.362963   \n","std                                2.367396   \n","min                                4.000000   \n","25%                                6.000000   \n","50%                                6.000000   \n","75%                               10.000000   \n","max                               12.000000   \n","\n","       Среднее количество товарных партий, поступающих на склад в день  \\\n","count                                         540.000000                 \n","mean                                           63.396296                 \n","std                                            19.728829                 \n","min                                            18.000000                 \n","25%                                            48.000000                 \n","50%                                            64.000000                 \n","75%                                            80.000000                 \n","max                                            98.000000                 \n","\n","       ФОТ КПП 1\\месяц  ФОТ КПП 2\\месяц  ФОТ ДИСПЕТЧЕРСКОЙ\\месяц  \\\n","count       540.000000       540.000000             5.400000e+02   \n","mean     211240.740741    238990.740741             5.384372e+05   \n","std       57324.689654     70028.154339             1.801239e+05   \n","min      120000.000000    135000.000000             2.600000e+05   \n","25%      160000.000000    180000.000000             3.900000e+05   \n","50%      220000.000000    240000.000000             5.040000e+05   \n","75%      240000.000000    270000.000000             6.500000e+05   \n","max      330000.000000    480000.000000             1.008000e+06   \n","\n","       Стоимость заезда товарной партии на СВХ  \\\n","count                               540.000000   \n","mean                               7028.703704   \n","std                                1588.633730   \n","min                                5500.000000   \n","25%                                5500.000000   \n","50%                                7000.000000   \n","75%                                9000.000000   \n","max                                9000.000000   \n","\n","       Стоимость ежемесячного обслуживания \"ВЕСЫ 1\" (мин пакет 10 рабочих мест)  \\\n","count                                              540.0                          \n","mean                                             15000.0                          \n","std                                                  0.0                          \n","min                                              15000.0                          \n","25%                                              15000.0                          \n","50%                                              15000.0                          \n","75%                                              15000.0                          \n","max                                              15000.0                          \n","\n","       Стоимость интегрированного ПО \"ВЕСЫ 1\" (мин пакет 10 рабочих мест)  \\\n","count                                              540.0                    \n","mean                                            180000.0                    \n","std                                                  0.0                    \n","min                                             180000.0                    \n","25%                                             180000.0                    \n","50%                                             180000.0                    \n","75%                                             180000.0                    \n","max                                             180000.0                    \n","\n","       Стоимость закупки и внедрения АСУ \"ВЕСЫ 1\"  \\\n","count                                5.400000e+02   \n","mean                                 1.995000e+06   \n","std                                  2.981436e+05   \n","min                                  1.800000e+06   \n","25%                                  1.800000e+06   \n","50%                                  1.800000e+06   \n","75%                                  2.450000e+06   \n","max                                  2.450000e+06   \n","\n","       Срок окупаемости внедрения ПО/мес.  \n","count                          540.000000  \n","mean                             5.127384  \n","std                              1.100417  \n","min                              2.891304  \n","25%                              4.336957  \n","50%                              5.186275  \n","75%                              5.867647  \n","max                              7.823529  "],"text/html":["\n","  <div id=\"df-4c3b6bfd-9d51-4610-9378-72cdb02e90cb\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Площадь СВХ</th>\n","      <th>Издержки на КПП 1, руб.\\день</th>\n","      <th>Издержки на КПП 2, руб.\\день</th>\n","      <th>Издержки на ДИСПЕТЧЕРСКАЯ, руб.\\день</th>\n","      <th>Количество сотрудников КПП 1</th>\n","      <th>Количество сотрудников КПП 2</th>\n","      <th>Количество сотрудников Диспетчерской</th>\n","      <th>Среднее количество товарных партий, поступающих на склад в день</th>\n","      <th>ФОТ КПП 1\\месяц</th>\n","      <th>ФОТ КПП 2\\месяц</th>\n","      <th>ФОТ ДИСПЕТЧЕРСКОЙ\\месяц</th>\n","      <th>Стоимость заезда товарной партии на СВХ</th>\n","      <th>Стоимость ежемесячного обслуживания \"ВЕСЫ 1\" (мин пакет 10 рабочих мест)</th>\n","      <th>Стоимость интегрированного ПО \"ВЕСЫ 1\" (мин пакет 10 рабочих мест)</th>\n","      <th>Стоимость закупки и внедрения АСУ \"ВЕСЫ 1\"</th>\n","      <th>Срок окупаемости внедрения ПО/мес.</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>540.000000</td>\n","      <td>540.000000</td>\n","      <td>540.000000</td>\n","      <td>540.000000</td>\n","      <td>540.000000</td>\n","      <td>540.000000</td>\n","      <td>540.000000</td>\n","      <td>540.000000</td>\n","      <td>540.000000</td>\n","      <td>540.000000</td>\n","      <td>5.400000e+02</td>\n","      <td>540.000000</td>\n","      <td>540.0</td>\n","      <td>540.0</td>\n","      <td>5.400000e+02</td>\n","      <td>540.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>7746.818519</td>\n","      <td>7041.358025</td>\n","      <td>7966.358025</td>\n","      <td>17947.908148</td>\n","      <td>4.635185</td>\n","      <td>4.727778</td>\n","      <td>7.362963</td>\n","      <td>63.396296</td>\n","      <td>211240.740741</td>\n","      <td>238990.740741</td>\n","      <td>5.384372e+05</td>\n","      <td>7028.703704</td>\n","      <td>15000.0</td>\n","      <td>180000.0</td>\n","      <td>1.995000e+06</td>\n","      <td>5.127384</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>3966.232491</td>\n","      <td>1910.822988</td>\n","      <td>2334.271811</td>\n","      <td>6004.131575</td>\n","      <td>1.109189</td>\n","      <td>1.288585</td>\n","      <td>2.367396</td>\n","      <td>19.728829</td>\n","      <td>57324.689654</td>\n","      <td>70028.154339</td>\n","      <td>1.801239e+05</td>\n","      <td>1588.633730</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>2.981436e+05</td>\n","      <td>1.100417</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>1202.000000</td>\n","      <td>4000.000000</td>\n","      <td>4500.000000</td>\n","      <td>8666.666667</td>\n","      <td>3.000000</td>\n","      <td>3.000000</td>\n","      <td>4.000000</td>\n","      <td>18.000000</td>\n","      <td>120000.000000</td>\n","      <td>135000.000000</td>\n","      <td>2.600000e+05</td>\n","      <td>5500.000000</td>\n","      <td>15000.0</td>\n","      <td>180000.0</td>\n","      <td>1.800000e+06</td>\n","      <td>2.891304</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>4380.250000</td>\n","      <td>5333.333333</td>\n","      <td>6000.000000</td>\n","      <td>13000.000000</td>\n","      <td>4.000000</td>\n","      <td>4.000000</td>\n","      <td>6.000000</td>\n","      <td>48.000000</td>\n","      <td>160000.000000</td>\n","      <td>180000.000000</td>\n","      <td>3.900000e+05</td>\n","      <td>5500.000000</td>\n","      <td>15000.0</td>\n","      <td>180000.0</td>\n","      <td>1.800000e+06</td>\n","      <td>4.336957</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>7509.000000</td>\n","      <td>7333.333333</td>\n","      <td>8000.000000</td>\n","      <td>16800.000000</td>\n","      <td>4.000000</td>\n","      <td>4.000000</td>\n","      <td>6.000000</td>\n","      <td>64.000000</td>\n","      <td>220000.000000</td>\n","      <td>240000.000000</td>\n","      <td>5.040000e+05</td>\n","      <td>7000.000000</td>\n","      <td>15000.0</td>\n","      <td>180000.0</td>\n","      <td>1.800000e+06</td>\n","      <td>5.186275</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>10972.000000</td>\n","      <td>8000.000000</td>\n","      <td>9000.000000</td>\n","      <td>21666.666667</td>\n","      <td>6.000000</td>\n","      <td>6.000000</td>\n","      <td>10.000000</td>\n","      <td>80.000000</td>\n","      <td>240000.000000</td>\n","      <td>270000.000000</td>\n","      <td>6.500000e+05</td>\n","      <td>9000.000000</td>\n","      <td>15000.0</td>\n","      <td>180000.0</td>\n","      <td>2.450000e+06</td>\n","      <td>5.867647</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>18092.000000</td>\n","      <td>11000.000000</td>\n","      <td>16000.000000</td>\n","      <td>33600.000000</td>\n","      <td>6.000000</td>\n","      <td>8.000000</td>\n","      <td>12.000000</td>\n","      <td>98.000000</td>\n","      <td>330000.000000</td>\n","      <td>480000.000000</td>\n","      <td>1.008000e+06</td>\n","      <td>9000.000000</td>\n","      <td>15000.0</td>\n","      <td>180000.0</td>\n","      <td>2.450000e+06</td>\n","      <td>7.823529</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4c3b6bfd-9d51-4610-9378-72cdb02e90cb')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-4c3b6bfd-9d51-4610-9378-72cdb02e90cb button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-4c3b6bfd-9d51-4610-9378-72cdb02e90cb');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":21}]},{"cell_type":"markdown","source":["Построение гистограмм"],"metadata":{"id":"NZy6QxVDaVQM"}},{"cell_type":"code","source":["sns.histplot(data['Площадь СВХ'], kde=False, bins=30, color=\"purple\")\n","sns.set(rc={'figure.figsize':(5,4)})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":449},"id":"9WH_pE_0aWGJ","executionInfo":{"status":"ok","timestamp":1682461564949,"user_tz":-180,"elapsed":1976,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"c84c377f-73db-4e40-c1f9-924beb86dadf"},"execution_count":22,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["sns.histplot(data['Издержки на КПП 1, руб.\\день'], kde=False, bins=30, color=\"purple\")\n","sns.set(rc={'figure.figsize':(5,4)})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":396},"id":"bTWYYg9Caclz","executionInfo":{"status":"ok","timestamp":1682461566022,"user_tz":-180,"elapsed":1080,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"e27a3446-d6c5-48ae-fec4-329336cf4044"},"execution_count":23,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 500x400 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["sns.histplot(data['Издержки на КПП 2, руб.\\день'], kde=False, bins=30, color=\"purple\")\n","sns.set(rc={'figure.figsize':(5,4)})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":401},"id":"_d4qVcmoaeR9","executionInfo":{"status":"ok","timestamp":1682461566620,"user_tz":-180,"elapsed":601,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"9d8fa8a7-afff-4471-b5ed-80d8c36155e7"},"execution_count":24,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 500x400 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["sns.histplot(data['Издержки на ДИСПЕТЧЕРСКАЯ, руб.\\день'], kde=False, bins=30, color=\"purple\")\n","sns.set(rc={'figure.figsize':(5,4)})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":396},"id":"7feKuzS5ahfK","executionInfo":{"status":"ok","timestamp":1682461567130,"user_tz":-180,"elapsed":513,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"795752c8-bb63-43be-8bb0-6ba3f60c0027"},"execution_count":25,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 500x400 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["sns.histplot(data['Количество сотрудников КПП 1'], kde=False, bins=30, color=\"purple\")\n","sns.set(rc={'figure.figsize':(5,4)})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":396},"id":"0tAkbkeUaoFh","executionInfo":{"status":"ok","timestamp":1682461568009,"user_tz":-180,"elapsed":882,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"4451c8ec-db38-4576-e80e-80d4381024f8"},"execution_count":26,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 500x400 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["sns.histplot(data['Количество сотрудников КПП 2'], kde=False, bins=30, color=\"purple\")\n","sns.set(rc={'figure.figsize':(5,4)})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":396},"id":"BEg6X0nbauwW","executionInfo":{"status":"ok","timestamp":1682461569025,"user_tz":-180,"elapsed":1020,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"49031824-79bc-4eaa-ce79-3de8e1ec0649"},"execution_count":27,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 500x400 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["sns.histplot(data['Количество сотрудников Диспетчерской'], kde=False, bins=30, color=\"purple\")\n","sns.set(rc={'figure.figsize':(5,4)})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":396},"id":"b9DUqBRmazlo","executionInfo":{"status":"ok","timestamp":1682461569702,"user_tz":-180,"elapsed":683,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"b738202b-dbb7-486d-9aca-abe4a1432cfd"},"execution_count":28,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 500x400 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["sns.histplot(data['Среднее количество товарных партий, поступающих на склад в день'], kde=False, bins=30, color=\"purple\")\n","sns.set(rc={'figure.figsize':(5,4)})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":396},"id":"QtId6Gxfa2g6","executionInfo":{"status":"ok","timestamp":1682461570689,"user_tz":-180,"elapsed":991,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"1df5943f-2d78-4145-bd1b-99d8d27c25ee"},"execution_count":29,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 500x400 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["sns.histplot(data['ФОТ КПП 1\\месяц'], kde=False, bins=30, color=\"purple\")\n","sns.set(rc={'figure.figsize':(5,4)})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":396},"id":"bhsChZ-5a5t9","executionInfo":{"status":"ok","timestamp":1682461571461,"user_tz":-180,"elapsed":777,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"f5e97380-a2f8-4bff-8f4e-6f5d0066ef10"},"execution_count":30,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 500x400 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["sns.histplot(data['ФОТ КПП 2\\месяц'], kde=False, bins=30, color=\"purple\")\n","sns.set(rc={'figure.figsize':(5,4)})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":401},"id":"TymLBZ5Aa8t6","executionInfo":{"status":"ok","timestamp":1682461572343,"user_tz":-180,"elapsed":887,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"5a02cfab-7ab6-4f43-d6c6-4613d509a4e8"},"execution_count":31,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 500x400 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["sns.histplot(data['ФОТ ДИСПЕТЧЕРСКОЙ\\месяц'], kde=False, bins=30, color=\"purple\")\n","sns.set(rc={'figure.figsize':(5,4)})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":397},"id":"s8b4660Ga_65","executionInfo":{"status":"ok","timestamp":1682461573558,"user_tz":-180,"elapsed":1220,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"ffe7e987-b4d1-4b1e-dd86-b05d758504df"},"execution_count":32,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 500x400 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["sns.histplot(data['Стоимость заезда товарной партии на СВХ'], kde=False, bins=30, color=\"purple\")\n","sns.set(rc={'figure.figsize':(5,4)})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":396},"id":"lBNwj12NbDKh","executionInfo":{"status":"ok","timestamp":1682461574500,"user_tz":-180,"elapsed":949,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"180b38b1-ee85-4865-ef81-5ffd723ad044"},"execution_count":33,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 500x400 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["sns.histplot(data['Стоимость ежемесячного обслуживания \"ВЕСЫ 1\" (мин пакет 10 рабочих мест)'], kde=False, bins=30, color=\"purple\")\n","sns.set(rc={'figure.figsize':(5,4)})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":396},"id":"OKYrsOhCbGHO","executionInfo":{"status":"ok","timestamp":1682461575720,"user_tz":-180,"elapsed":1225,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"56090b8c-f220-43de-86da-fb3cec7d9865"},"execution_count":34,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 500x400 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["sns.histplot(data['Стоимость интегрированного ПО \"ВЕСЫ 1\" (мин пакет 10 рабочих мест)'], kde=False, bins=30, color=\"purple\")\n","sns.set(rc={'figure.figsize':(5,4)})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":396},"id":"qIT0qBaMbJVG","executionInfo":{"status":"ok","timestamp":1682461576753,"user_tz":-180,"elapsed":1037,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"e50aa574-f70b-4281-b7f9-42cb5981eecb"},"execution_count":35,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 500x400 with 1 Axes>"],"image/png":"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\n"},"metadata":{}}]},{"cell_type":"code","source":["sns.histplot(data['Стоимость закупки и внедрения АСУ \"ВЕСЫ 1\"'], kde=False, bins=30, color=\"purple\")\n","sns.set(rc={'figure.figsize':(5,4)})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":396},"id":"KaMiuoegbL7f","executionInfo":{"status":"ok","timestamp":1682461579043,"user_tz":-180,"elapsed":2294,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"e964f24b-6bcd-48d7-a314-b446467ad7d1"},"execution_count":36,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 500x400 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["sns.histplot(data['Срок окупаемости внедрения ПО/мес.'], kde=False, bins=30, color=\"purple\")\n","sns.set(rc={'figure.figsize':(5,4)})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":396},"id":"JNqWw7xZbO1p","executionInfo":{"status":"ok","timestamp":1682461580493,"user_tz":-180,"elapsed":1456,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"7e145675-9e0c-4f98-8249-490de3728c77"},"execution_count":37,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 500x400 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["Все признаки далеки от нормального распределения"],"metadata":{"id":"9Ff4BHehbm9d"}},{"cell_type":"markdown","source":["Видно что Стоимость интегрированного ПО \"ВЕСЫ 1\" (мин пакет 10 рабочих мест) и Стоимость ежемесячного обслуживания \"ВЕСЫ 1\" (мин пакет 10 рабочих мест) - константные данные, поэтому их нужно удалить из списка численных признаков"],"metadata":{"id":"m_6HhOKabpdF"}},{"cell_type":"code","source":["num_col.remove('Стоимость интегрированного ПО \"ВЕСЫ 1\" (мин пакет 10 рабочих мест)')\n","num_col.remove('Стоимость ежемесячного обслуживания \"ВЕСЫ 1\" (мин пакет 10 рабочих мест)')"],"metadata":{"id":"kvcH00_XbrcT","executionInfo":{"status":"ok","timestamp":1682461580494,"user_tz":-180,"elapsed":7,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}}},"execution_count":38,"outputs":[]},{"cell_type":"markdown","source":["Коробки с усами"],"metadata":{"id":"yXEU3KMPJprK"}},{"cell_type":"code","source":["sns.boxplot(y=\"Площадь СВХ\", data=data, color=\"purple\")\n","sns.set(rc={'figure.figsize':(4,3)})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":345},"id":"zypLwLe0K2mv","executionInfo":{"status":"ok","timestamp":1682461581096,"user_tz":-180,"elapsed":607,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"d19afefd-27ff-4796-a25b-a5378f32e3c1"},"execution_count":39,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 500x400 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["sns.boxplot(y=\"Издержки на КПП 1, руб.\\день\", data=data, color=\"purple\")\n","sns.set(rc={'figure.figsize':(4,3)})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":268},"id":"lXyNbWkmLhY_","executionInfo":{"status":"ok","timestamp":1682461581683,"user_tz":-180,"elapsed":591,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"1664dc2b-f152-4f59-b4fb-9d885dc12d27"},"execution_count":40,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 400x300 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["sns.boxplot(y=\"Издержки на КПП 2, руб.\\день\", data=data, color=\"purple\")\n","sns.set(rc={'figure.figsize':(4,3)})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":275},"id":"Uu4m97uDLhR6","executionInfo":{"status":"ok","timestamp":1682461582351,"user_tz":-180,"elapsed":672,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"0bb46fa4-39a6-46aa-955c-1cc34aa3ea27"},"execution_count":41,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 400x300 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["sns.boxplot(y=\"Издержки на ДИСПЕТЧЕРСКАЯ, руб.\\день\", data=data, color=\"purple\")\n","sns.set(rc={'figure.figsize':(4,3)})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":268},"id":"yRpco_sCLhPn","executionInfo":{"status":"ok","timestamp":1682461582352,"user_tz":-180,"elapsed":10,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"901aec8e-c56c-4f3b-d55b-108577149bf9"},"execution_count":42,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 400x300 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["sns.boxplot(y=\"Количество сотрудников КПП 1\", data=data, color=\"purple\")\n","sns.set(rc={'figure.figsize':(4,3)})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":268},"id":"26DfuiUnLhIv","executionInfo":{"status":"ok","timestamp":1682461582919,"user_tz":-180,"elapsed":9,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"2abb109b-a5d3-43a7-f661-0eb36a7dbc2c"},"execution_count":43,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 400x300 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["sns.boxplot(y=\"Количество сотрудников КПП 2\", data=data, color=\"purple\")\n","sns.set(rc={'figure.figsize':(4,3)})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":268},"id":"C7QPxhjfLhHK","executionInfo":{"status":"ok","timestamp":1682461583422,"user_tz":-180,"elapsed":509,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"c303ea81-3f85-43fd-96c5-d5c05ad59562"},"execution_count":44,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 400x300 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["sns.boxplot(y=\"Количество сотрудников Диспетчерской\", data=data, color=\"purple\")\n","sns.set(rc={'figure.figsize':(4,3)})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":268},"id":"fmYUsczELhAN","executionInfo":{"status":"ok","timestamp":1682461584030,"user_tz":-180,"elapsed":616,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"f2e6a773-8932-4134-917f-c952deca05a3"},"execution_count":45,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 400x300 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["sns.boxplot(y=\"Среднее количество товарных партий, поступающих на склад в день\", data=data, color=\"purple\")\n","sns.set(rc={'figure.figsize':(4,3)})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":268},"id":"bq6zotcrLg49","executionInfo":{"status":"ok","timestamp":1682461584031,"user_tz":-180,"elapsed":615,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"81d9df9a-47c6-4982-ae5f-853553ca3c14"},"execution_count":46,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 400x300 with 1 Axes>"],"image/png":"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\n"},"metadata":{}}]},{"cell_type":"code","source":["sns.boxplot(y=\"ФОТ КПП 1\\месяц\", data=data, color=\"purple\")\n","sns.set(rc={'figure.figsize':(4,3)})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":268},"id":"2rJKUAmoLpuh","executionInfo":{"status":"ok","timestamp":1682461584032,"user_tz":-180,"elapsed":12,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"7dfd9279-42bd-4a0a-dff4-27fa9730ec9c"},"execution_count":47,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 400x300 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["sns.boxplot(y=\"ФОТ ДИСПЕТЧЕРСКОЙ\\месяц\", data=data, color=\"purple\")\n","sns.set(rc={'figure.figsize':(4,3)})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":284},"id":"kLC_YApALpkT","executionInfo":{"status":"ok","timestamp":1682461584479,"user_tz":-180,"elapsed":457,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"0ffbfb52-f5c7-4ceb-9d94-a42ca531b3ed"},"execution_count":48,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 400x300 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["sns.boxplot(y=\"Стоимость заезда товарной партии на СВХ\", data=data, color=\"purple\")\n","sns.set(rc={'figure.figsize':(4,3)})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":268},"id":"ERFR9A-YLtSo","executionInfo":{"status":"ok","timestamp":1682461584955,"user_tz":-180,"elapsed":482,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"40d8a531-79ba-459e-f217-0691eb868a12"},"execution_count":49,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 400x300 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["sns.boxplot(y='Стоимость закупки и внедрения АСУ \"ВЕСЫ 1\"', data=data, color=\"purple\")\n","sns.set(rc={'figure.figsize':(4,3)})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":284},"id":"uL_M4wkRLtQ8","executionInfo":{"status":"ok","timestamp":1682461584956,"user_tz":-180,"elapsed":8,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"b17ba6b4-230a-4a17-ef37-23fbf50f0630"},"execution_count":50,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 400x300 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["sns.boxplot(y=\"Срок окупаемости внедрения ПО/мес.\", data=data, color=\"purple\")\n","sns.set(rc={'figure.figsize':(4,3)})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":271},"id":"6uZ9WxeRLtJp","executionInfo":{"status":"ok","timestamp":1682461585453,"user_tz":-180,"elapsed":503,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"739e1371-25da-49da-e3c4-2f6f47bc6d2a"},"execution_count":51,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 400x300 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["Анализ корреляции"],"metadata":{"id":"yyZ-Jw8oJj9Z"}},{"cell_type":"code","source":["data[num_col].corr()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":896},"id":"jqX7dOsQbucf","executionInfo":{"status":"ok","timestamp":1682461585453,"user_tz":-180,"elapsed":17,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"a835e882-c932-4d4a-cb70-9de714ad1927"},"execution_count":52,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                    Площадь СВХ  \\\n","Площадь СВХ                                            1.000000   \n","Издержки на КПП 1, руб.\\день                           0.764962   \n","Издержки на КПП 2, руб.\\день                           0.819605   \n","Издержки на ДИСПЕТЧЕРСКАЯ, руб.\\день                   0.858212   \n","Количество сотрудников КПП 1                           0.900310   \n","Количество сотрудников КПП 2                           0.908559   \n","Количество сотрудников Диспетчерской                   0.916352   \n","Среднее количество товарных партий, поступающих...     0.464687   \n","ФОТ КПП 1\\месяц                                        0.764962   \n","ФОТ КПП 2\\месяц                                        0.819605   \n","ФОТ ДИСПЕТЧЕРСКОЙ\\месяц                                0.858212   \n","Стоимость заезда товарной партии на СВХ               -0.047330   \n","Стоимость закупки и внедрения АСУ \"ВЕСЫ 1\"             0.819147   \n","Срок окупаемости внедрения ПО/мес.                    -0.582692   \n","\n","                                                    Издержки на КПП 1, руб.\\день  \\\n","Площадь СВХ                                                             0.764962   \n","Издержки на КПП 1, руб.\\день                                            1.000000   \n","Издержки на КПП 2, руб.\\день                                            0.953805   \n","Издержки на ДИСПЕТЧЕРСКАЯ, руб.\\день                                    0.960533   \n","Количество сотрудников КПП 1                                            0.844557   \n","Количество сотрудников КПП 2                                            0.796248   \n","Количество сотрудников Диспетчерской                                    0.829100   \n","Среднее количество товарных партий, поступающих...                      0.429663   \n","ФОТ КПП 1\\месяц                                                         1.000000   \n","ФОТ КПП 2\\месяц                                                         0.953805   \n","ФОТ ДИСПЕТЧЕРСКОЙ\\месяц                                                 0.960533   \n","Стоимость заезда товарной партии на СВХ                                 0.442864   \n","Стоимость закупки и внедрения АСУ \"ВЕСЫ 1\"                              0.669542   \n","Срок окупаемости внедрения ПО/мес.                                     -0.862813   \n","\n","                                                    Издержки на КПП 2, руб.\\день  \\\n","Площадь СВХ                                                             0.819605   \n","Издержки на КПП 1, руб.\\день                                            0.953805   \n","Издержки на КПП 2, руб.\\день                                            1.000000   \n","Издержки на ДИСПЕТЧЕРСКАЯ, руб.\\день                                    0.979474   \n","Количество сотрудников КПП 1                                            0.851066   \n","Количество сотрудников КПП 2                                            0.893165   \n","Количество сотрудников Диспетчерской                                    0.884901   \n","Среднее количество товарных партий, поступающих...                      0.423975   \n","ФОТ КПП 1\\месяц                                                         0.953805   \n","ФОТ КПП 2\\месяц                                                         1.000000   \n","ФОТ ДИСПЕТЧЕРСКОЙ\\месяц                                                 0.979474   \n","Стоимость заезда товарной партии на СВХ                                 0.354603   \n","Стоимость закупки и внедрения АСУ \"ВЕСЫ 1\"                              0.711804   \n","Срок окупаемости внедрения ПО/мес.                                     -0.823608   \n","\n","                                                    Издержки на ДИСПЕТЧЕРСКАЯ, руб.\\день  \\\n","Площадь СВХ                                                                     0.858212   \n","Издержки на КПП 1, руб.\\день                                                    0.960533   \n","Издержки на КПП 2, руб.\\день                                                    0.979474   \n","Издержки на ДИСПЕТЧЕРСКАЯ, руб.\\день                                            1.000000   \n","Количество сотрудников КПП 1                                                    0.922342   \n","Количество сотрудников КПП 2                                                    0.921300   \n","Количество сотрудников Диспетчерской                                            0.933610   \n","Среднее количество товарных партий, поступающих...                              0.448396   \n","ФОТ КПП 1\\месяц                                                                 0.960533   \n","ФОТ КПП 2\\месяц                                                                 0.979474   \n","ФОТ ДИСПЕТЧЕРСКОЙ\\месяц                                                         1.000000   \n","Стоимость заезда товарной партии на СВХ                                         0.276751   \n","Стоимость закупки и внедрения АСУ \"ВЕСЫ 1\"                                      0.756929   \n","Срок окупаемости внедрения ПО/мес.                                             -0.804224   \n","\n","                                                    Количество сотрудников КПП 1  \\\n","Площадь СВХ                                                             0.900310   \n","Издержки на КПП 1, руб.\\день                                            0.844557   \n","Издержки на КПП 2, руб.\\день                                            0.851066   \n","Издержки на ДИСПЕТЧЕРСКАЯ, руб.\\день                                    0.922342   \n","Количество сотрудников КПП 1                                            1.000000   \n","Количество сотрудников КПП 2                                            0.949361   \n","Количество сотрудников Диспетчерской                                    0.985269   \n","Среднее количество товарных партий, поступающих...                      0.445197   \n","ФОТ КПП 1\\месяц                                                         0.844557   \n","ФОТ КПП 2\\месяц                                                         0.851066   \n","ФОТ ДИСПЕТЧЕРСКОЙ\\месяц                                                 0.922342   \n","Стоимость заезда товарной партии на СВХ                                -0.056693   \n","Стоимость закупки и внедрения АСУ \"ВЕСЫ 1\"                              0.806274   \n","Срок окупаемости внедрения ПО/мес.                                     -0.655659   \n","\n","                                                    Количество сотрудников КПП 2  \\\n","Площадь СВХ                                                             0.908559   \n","Издержки на КПП 1, руб.\\день                                            0.796248   \n","Издержки на КПП 2, руб.\\день                                            0.893165   \n","Издержки на ДИСПЕТЧЕРСКАЯ, руб.\\день                                    0.921300   \n","Количество сотрудников КПП 1                                            0.949361   \n","Количество сотрудников КПП 2                                            1.000000   \n","Количество сотрудников Диспетчерской                                    0.989106   \n","Среднее количество товарных партий, поступающих...                      0.422639   \n","ФОТ КПП 1\\месяц                                                         0.796248   \n","ФОТ КПП 2\\месяц                                                         0.893165   \n","ФОТ ДИСПЕТЧЕРСКОЙ\\месяц                                                 0.921300   \n","Стоимость заезда товарной партии на СВХ                                -0.060977   \n","Стоимость закупки и внедрения АСУ \"ВЕСЫ 1\"                              0.803888   \n","Срок окупаемости внедрения ПО/мес.                                     -0.632377   \n","\n","                                                    Количество сотрудников Диспетчерской  \\\n","Площадь СВХ                                                                     0.916352   \n","Издержки на КПП 1, руб.\\день                                                    0.829100   \n","Издержки на КПП 2, руб.\\день                                                    0.884901   \n","Издержки на ДИСПЕТЧЕРСКАЯ, руб.\\день                                            0.933610   \n","Количество сотрудников КПП 1                                                    0.985269   \n","Количество сотрудников КПП 2                                                    0.989106   \n","Количество сотрудников Диспетчерской                                            1.000000   \n","Среднее количество товарных партий, поступающих...                              0.438631   \n","ФОТ КПП 1\\месяц                                                                 0.829100   \n","ФОТ КПП 2\\месяц                                                                 0.884901   \n","ФОТ ДИСПЕТЧЕРСКОЙ\\месяц                                                         0.933610   \n","Стоимость заезда товарной партии на СВХ                                        -0.059752   \n","Стоимость закупки и внедрения АСУ \"ВЕСЫ 1\"                                      0.815321   \n","Срок окупаемости внедрения ПО/мес.                                             -0.651400   \n","\n","                                                    Среднее количество товарных партий, поступающих на склад в день  \\\n","Площадь СВХ                                                                                  0.464687                 \n","Издержки на КПП 1, руб.\\день                                                                 0.429663                 \n","Издержки на КПП 2, руб.\\день                                                                 0.423975                 \n","Издержки на ДИСПЕТЧЕРСКАЯ, руб.\\день                                                         0.448396                 \n","Количество сотрудников КПП 1                                                                 0.445197                 \n","Количество сотрудников КПП 2                                                                 0.422639                 \n","Количество сотрудников Диспетчерской                                                         0.438631                 \n","Среднее количество товарных партий, поступающих...                                           1.000000                 \n","ФОТ КПП 1\\месяц                                                                              0.429663                 \n","ФОТ КПП 2\\месяц                                                                              0.423975                 \n","ФОТ ДИСПЕТЧЕРСКОЙ\\месяц                                                                      0.448396                 \n","Стоимость заезда товарной партии на СВХ                                                      0.087452                 \n","Стоимость закупки и внедрения АСУ \"ВЕСЫ 1\"                                                   0.365511                 \n","Срок окупаемости внедрения ПО/мес.                                                          -0.435590                 \n","\n","                                                    ФОТ КПП 1\\месяц  \\\n","Площадь СВХ                                                0.764962   \n","Издержки на КПП 1, руб.\\день                               1.000000   \n","Издержки на КПП 2, руб.\\день                               0.953805   \n","Издержки на ДИСПЕТЧЕРСКАЯ, руб.\\день                       0.960533   \n","Количество сотрудников КПП 1                               0.844557   \n","Количество сотрудников КПП 2                               0.796248   \n","Количество сотрудников Диспетчерской                       0.829100   \n","Среднее количество товарных партий, поступающих...         0.429663   \n","ФОТ КПП 1\\месяц                                            1.000000   \n","ФОТ КПП 2\\месяц                                            0.953805   \n","ФОТ ДИСПЕТЧЕРСКОЙ\\месяц                                    0.960533   \n","Стоимость заезда товарной партии на СВХ                    0.442864   \n","Стоимость закупки и внедрения АСУ \"ВЕСЫ 1\"                 0.669542   \n","Срок окупаемости внедрения ПО/мес.                        -0.862813   \n","\n","                                                    ФОТ КПП 2\\месяц  \\\n","Площадь СВХ                                                0.819605   \n","Издержки на КПП 1, руб.\\день                               0.953805   \n","Издержки на КПП 2, руб.\\день                               1.000000   \n","Издержки на ДИСПЕТЧЕРСКАЯ, руб.\\день                       0.979474   \n","Количество сотрудников КПП 1                               0.851066   \n","Количество сотрудников КПП 2                               0.893165   \n","Количество сотрудников Диспетчерской                       0.884901   \n","Среднее количество товарных партий, поступающих...         0.423975   \n","ФОТ КПП 1\\месяц                                            0.953805   \n","ФОТ КПП 2\\месяц                                            1.000000   \n","ФОТ ДИСПЕТЧЕРСКОЙ\\месяц                                    0.979474   \n","Стоимость заезда товарной партии на СВХ                    0.354603   \n","Стоимость закупки и внедрения АСУ \"ВЕСЫ 1\"                 0.711804   \n","Срок окупаемости внедрения ПО/мес.                        -0.823608   \n","\n","                                                    ФОТ ДИСПЕТЧЕРСКОЙ\\месяц  \\\n","Площадь СВХ                                                        0.858212   \n","Издержки на КПП 1, руб.\\день                                       0.960533   \n","Издержки на КПП 2, руб.\\день                                       0.979474   \n","Издержки на ДИСПЕТЧЕРСКАЯ, руб.\\день                               1.000000   \n","Количество сотрудников КПП 1                                       0.922342   \n","Количество сотрудников КПП 2                                       0.921300   \n","Количество сотрудников Диспетчерской                               0.933610   \n","Среднее количество товарных партий, поступающих...                 0.448396   \n","ФОТ КПП 1\\месяц                                                    0.960533   \n","ФОТ КПП 2\\месяц                                                    0.979474   \n","ФОТ ДИСПЕТЧЕРСКОЙ\\месяц                                            1.000000   \n","Стоимость заезда товарной партии на СВХ                            0.276751   \n","Стоимость закупки и внедрения АСУ \"ВЕСЫ 1\"                         0.756929   \n","Срок окупаемости внедрения ПО/мес.                                -0.804224   \n","\n","                                                    Стоимость заезда товарной партии на СВХ  \\\n","Площадь СВХ                                                                       -0.047330   \n","Издержки на КПП 1, руб.\\день                                                       0.442864   \n","Издержки на КПП 2, руб.\\день                                                       0.354603   \n","Издержки на ДИСПЕТЧЕРСКАЯ, руб.\\день                                               0.276751   \n","Количество сотрудников КПП 1                                                      -0.056693   \n","Количество сотрудников КПП 2                                                      -0.060977   \n","Количество сотрудников Диспетчерской                                              -0.059752   \n","Среднее количество товарных партий, поступающих...                                 0.087452   \n","ФОТ КПП 1\\месяц                                                                    0.442864   \n","ФОТ КПП 2\\месяц                                                                    0.354603   \n","ФОТ ДИСПЕТЧЕРСКОЙ\\месяц                                                            0.276751   \n","Стоимость заезда товарной партии на СВХ                                            1.000000   \n","Стоимость закупки и внедрения АСУ \"ВЕСЫ 1\"                                        -0.058942   \n","Срок окупаемости внедрения ПО/мес.                                                -0.547549   \n","\n","                                                    Стоимость закупки и внедрения АСУ \"ВЕСЫ 1\"  \\\n","Площадь СВХ                                                                           0.819147   \n","Издержки на КПП 1, руб.\\день                                                          0.669542   \n","Издержки на КПП 2, руб.\\день                                                          0.711804   \n","Издержки на ДИСПЕТЧЕРСКАЯ, руб.\\день                                                  0.756929   \n","Количество сотрудников КПП 1                                                          0.806274   \n","Количество сотрудников КПП 2                                                          0.803888   \n","Количество сотрудников Диспетчерской                                                  0.815321   \n","Среднее количество товарных партий, поступающих...                                    0.365511   \n","ФОТ КПП 1\\месяц                                                                       0.669542   \n","ФОТ КПП 2\\месяц                                                                       0.711804   \n","ФОТ ДИСПЕТЧЕРСКОЙ\\месяц                                                               0.756929   \n","Стоимость заезда товарной партии на СВХ                                              -0.058942   \n","Стоимость закупки и внедрения АСУ \"ВЕСЫ 1\"                                            1.000000   \n","Срок окупаемости внедрения ПО/мес.                                                   -0.307094   \n","\n","                                                    Срок окупаемости внедрения ПО/мес.  \n","Площадь СВХ                                                                  -0.582692  \n","Издержки на КПП 1, руб.\\день                                                 -0.862813  \n","Издержки на КПП 2, руб.\\день                                                 -0.823608  \n","Издержки на ДИСПЕТЧЕРСКАЯ, руб.\\день                                         -0.804224  \n","Количество сотрудников КПП 1                                                 -0.655659  \n","Количество сотрудников КПП 2                                                 -0.632377  \n","Количество сотрудников Диспетчерской                                         -0.651400  \n","Среднее количество товарных партий, поступающих...                           -0.435590  \n","ФОТ КПП 1\\месяц                                                              -0.862813  \n","ФОТ КПП 2\\месяц                                                              -0.823608  \n","ФОТ ДИСПЕТЧЕРСКОЙ\\месяц                                                      -0.804224  \n","Стоимость заезда товарной партии на СВХ                                      -0.547549  \n","Стоимость закупки и внедрения АСУ \"ВЕСЫ 1\"                                   -0.307094  \n","Срок окупаемости внедрения ПО/мес.                                            1.000000  "],"text/html":["\n","  <div id=\"df-9541b64a-81da-46f2-ac5a-c3f133014293\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Площадь СВХ</th>\n","      <th>Издержки на КПП 1, руб.\\день</th>\n","      <th>Издержки на КПП 2, руб.\\день</th>\n","      <th>Издержки на ДИСПЕТЧЕРСКАЯ, руб.\\день</th>\n","      <th>Количество сотрудников КПП 1</th>\n","      <th>Количество сотрудников КПП 2</th>\n","      <th>Количество сотрудников Диспетчерской</th>\n","      <th>Среднее количество товарных партий, поступающих на склад в день</th>\n","      <th>ФОТ КПП 1\\месяц</th>\n","      <th>ФОТ КПП 2\\месяц</th>\n","      <th>ФОТ ДИСПЕТЧЕРСКОЙ\\месяц</th>\n","      <th>Стоимость заезда товарной партии на СВХ</th>\n","      <th>Стоимость закупки и внедрения АСУ \"ВЕСЫ 1\"</th>\n","      <th>Срок окупаемости внедрения ПО/мес.</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Площадь СВХ</th>\n","      <td>1.000000</td>\n","      <td>0.764962</td>\n","      <td>0.819605</td>\n","      <td>0.858212</td>\n","      <td>0.900310</td>\n","      <td>0.908559</td>\n","      <td>0.916352</td>\n","      <td>0.464687</td>\n","      <td>0.764962</td>\n","      <td>0.819605</td>\n","      <td>0.858212</td>\n","      <td>-0.047330</td>\n","      <td>0.819147</td>\n","      <td>-0.582692</td>\n","    </tr>\n","    <tr>\n","      <th>Издержки на КПП 1, руб.\\день</th>\n","      <td>0.764962</td>\n","      <td>1.000000</td>\n","      <td>0.953805</td>\n","      <td>0.960533</td>\n","      <td>0.844557</td>\n","      <td>0.796248</td>\n","      <td>0.829100</td>\n","      <td>0.429663</td>\n","      <td>1.000000</td>\n","      <td>0.953805</td>\n","      <td>0.960533</td>\n","      <td>0.442864</td>\n","      <td>0.669542</td>\n","      <td>-0.862813</td>\n","    </tr>\n","    <tr>\n","      <th>Издержки на КПП 2, руб.\\день</th>\n","      <td>0.819605</td>\n","      <td>0.953805</td>\n","      <td>1.000000</td>\n","      <td>0.979474</td>\n","      <td>0.851066</td>\n","      <td>0.893165</td>\n","      <td>0.884901</td>\n","      <td>0.423975</td>\n","      <td>0.953805</td>\n","      <td>1.000000</td>\n","      <td>0.979474</td>\n","      <td>0.354603</td>\n","      <td>0.711804</td>\n","      <td>-0.823608</td>\n","    </tr>\n","    <tr>\n","      <th>Издержки на ДИСПЕТЧЕРСКАЯ, руб.\\день</th>\n","      <td>0.858212</td>\n","      <td>0.960533</td>\n","      <td>0.979474</td>\n","      <td>1.000000</td>\n","      <td>0.922342</td>\n","      <td>0.921300</td>\n","      <td>0.933610</td>\n","      <td>0.448396</td>\n","      <td>0.960533</td>\n","      <td>0.979474</td>\n","      <td>1.000000</td>\n","      <td>0.276751</td>\n","      <td>0.756929</td>\n","      <td>-0.804224</td>\n","    </tr>\n","    <tr>\n","      <th>Количество сотрудников КПП 1</th>\n","      <td>0.900310</td>\n","      <td>0.844557</td>\n","      <td>0.851066</td>\n","      <td>0.922342</td>\n","      <td>1.000000</td>\n","      <td>0.949361</td>\n","      <td>0.985269</td>\n","      <td>0.445197</td>\n","      <td>0.844557</td>\n","      <td>0.851066</td>\n","      <td>0.922342</td>\n","      <td>-0.056693</td>\n","      <td>0.806274</td>\n","      <td>-0.655659</td>\n","    </tr>\n","    <tr>\n","      <th>Количество сотрудников КПП 2</th>\n","      <td>0.908559</td>\n","      <td>0.796248</td>\n","      <td>0.893165</td>\n","      <td>0.921300</td>\n","      <td>0.949361</td>\n","      <td>1.000000</td>\n","      <td>0.989106</td>\n","      <td>0.422639</td>\n","      <td>0.796248</td>\n","      <td>0.893165</td>\n","      <td>0.921300</td>\n","      <td>-0.060977</td>\n","      <td>0.803888</td>\n","      <td>-0.632377</td>\n","    </tr>\n","    <tr>\n","      <th>Количество сотрудников Диспетчерской</th>\n","      <td>0.916352</td>\n","      <td>0.829100</td>\n","      <td>0.884901</td>\n","      <td>0.933610</td>\n","      <td>0.985269</td>\n","      <td>0.989106</td>\n","      <td>1.000000</td>\n","      <td>0.438631</td>\n","      <td>0.829100</td>\n","      <td>0.884901</td>\n","      <td>0.933610</td>\n","      <td>-0.059752</td>\n","      <td>0.815321</td>\n","      <td>-0.651400</td>\n","    </tr>\n","    <tr>\n","      <th>Среднее количество товарных партий, поступающих на склад в день</th>\n","      <td>0.464687</td>\n","      <td>0.429663</td>\n","      <td>0.423975</td>\n","      <td>0.448396</td>\n","      <td>0.445197</td>\n","      <td>0.422639</td>\n","      <td>0.438631</td>\n","      <td>1.000000</td>\n","      <td>0.429663</td>\n","      <td>0.423975</td>\n","      <td>0.448396</td>\n","      <td>0.087452</td>\n","      <td>0.365511</td>\n","      <td>-0.435590</td>\n","    </tr>\n","    <tr>\n","      <th>ФОТ КПП 1\\месяц</th>\n","      <td>0.764962</td>\n","      <td>1.000000</td>\n","      <td>0.953805</td>\n","      <td>0.960533</td>\n","      <td>0.844557</td>\n","      <td>0.796248</td>\n","      <td>0.829100</td>\n","      <td>0.429663</td>\n","      <td>1.000000</td>\n","      <td>0.953805</td>\n","      <td>0.960533</td>\n","      <td>0.442864</td>\n","      <td>0.669542</td>\n","      <td>-0.862813</td>\n","    </tr>\n","    <tr>\n","      <th>ФОТ КПП 2\\месяц</th>\n","      <td>0.819605</td>\n","      <td>0.953805</td>\n","      <td>1.000000</td>\n","      <td>0.979474</td>\n","      <td>0.851066</td>\n","      <td>0.893165</td>\n","      <td>0.884901</td>\n","      <td>0.423975</td>\n","      <td>0.953805</td>\n","      <td>1.000000</td>\n","      <td>0.979474</td>\n","      <td>0.354603</td>\n","      <td>0.711804</td>\n","      <td>-0.823608</td>\n","    </tr>\n","    <tr>\n","      <th>ФОТ ДИСПЕТЧЕРСКОЙ\\месяц</th>\n","      <td>0.858212</td>\n","      <td>0.960533</td>\n","      <td>0.979474</td>\n","      <td>1.000000</td>\n","      <td>0.922342</td>\n","      <td>0.921300</td>\n","      <td>0.933610</td>\n","      <td>0.448396</td>\n","      <td>0.960533</td>\n","      <td>0.979474</td>\n","      <td>1.000000</td>\n","      <td>0.276751</td>\n","      <td>0.756929</td>\n","      <td>-0.804224</td>\n","    </tr>\n","    <tr>\n","      <th>Стоимость заезда товарной партии на СВХ</th>\n","      <td>-0.047330</td>\n","      <td>0.442864</td>\n","      <td>0.354603</td>\n","      <td>0.276751</td>\n","      <td>-0.056693</td>\n","      <td>-0.060977</td>\n","      <td>-0.059752</td>\n","      <td>0.087452</td>\n","      <td>0.442864</td>\n","      <td>0.354603</td>\n","      <td>0.276751</td>\n","      <td>1.000000</td>\n","      <td>-0.058942</td>\n","      <td>-0.547549</td>\n","    </tr>\n","    <tr>\n","      <th>Стоимость закупки и внедрения АСУ \"ВЕСЫ 1\"</th>\n","      <td>0.819147</td>\n","      <td>0.669542</td>\n","      <td>0.711804</td>\n","      <td>0.756929</td>\n","      <td>0.806274</td>\n","      <td>0.803888</td>\n","      <td>0.815321</td>\n","      <td>0.365511</td>\n","      <td>0.669542</td>\n","      <td>0.711804</td>\n","      <td>0.756929</td>\n","      <td>-0.058942</td>\n","      <td>1.000000</td>\n","      <td>-0.307094</td>\n","    </tr>\n","    <tr>\n","      <th>Срок окупаемости внедрения ПО/мес.</th>\n","      <td>-0.582692</td>\n","      <td>-0.862813</td>\n","      <td>-0.823608</td>\n","      <td>-0.804224</td>\n","      <td>-0.655659</td>\n","      <td>-0.632377</td>\n","      <td>-0.651400</td>\n","      <td>-0.435590</td>\n","      <td>-0.862813</td>\n","      <td>-0.823608</td>\n","      <td>-0.804224</td>\n","      <td>-0.547549</td>\n","      <td>-0.307094</td>\n","      <td>1.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9541b64a-81da-46f2-ac5a-c3f133014293')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-9541b64a-81da-46f2-ac5a-c3f133014293 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-9541b64a-81da-46f2-ac5a-c3f133014293');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":52}]},{"cell_type":"markdown","source":["Для наглядности остроим тепловую карту коэффициентов корреляции"],"metadata":{"id":"UOnB0D1jbxxR"}},{"cell_type":"code","source":["num_col"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"n1cyXwTJbyRr","executionInfo":{"status":"ok","timestamp":1682461585454,"user_tz":-180,"elapsed":14,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"b9785b9f-deaf-4bde-d3a1-e23e6403234d"},"execution_count":53,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['Площадь СВХ',\n"," 'Издержки на КПП 1, руб.\\\\день',\n"," 'Издержки на КПП 2, руб.\\\\день',\n"," 'Издержки на ДИСПЕТЧЕРСКАЯ, руб.\\\\день',\n"," 'Количество сотрудников КПП 1',\n"," 'Количество сотрудников КПП 2',\n"," 'Количество сотрудников Диспетчерской',\n"," 'Среднее количество товарных партий, поступающих на склад в день',\n"," 'ФОТ КПП 1\\\\месяц',\n"," 'ФОТ КПП 2\\\\месяц',\n"," 'ФОТ ДИСПЕТЧЕРСКОЙ\\\\месяц',\n"," 'Стоимость заезда товарной партии на СВХ',\n"," 'Стоимость закупки и внедрения АСУ \"ВЕСЫ 1\"',\n"," 'Срок окупаемости внедрения ПО/мес.']"]},"metadata":{},"execution_count":53}]},{"cell_type":"code","source":["sns.set(rc = {'figure.figsize':(12,10)})\n","sns.heatmap(data[num_col].corr(), vmin = -1, vmax = +1, annot = True)\n","None"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"lJ4FBIaMb2Y_","executionInfo":{"status":"ok","timestamp":1682461589579,"user_tz":-180,"elapsed":4131,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"bb91e4ac-0025-479a-e4ea-569481598e4f"},"execution_count":54,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x1000 with 2 Axes>"],"image/png":"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9uGu2Sf6zrTtuin7RN8Z3zens0/0HxQ3+OuEZfwcZpvOZJ/o/wxnohMREWUjODgYQUFBOHHiBGbNmqWx38rKSm2R0E/Z2dnlKE46EREREREREf33cBCdiIgoGyNGjEBUVBQ6duyILl26aOx3d3eHu7u7zvzdunXLx9IRERERERERUX7iIDoREf3fGjNmDMaMGZNtunPnzn2F0hAREREREdH/C4WcEba/J3y3nIiIiIiIiIiIiIhIBw6iExERERERERERERHpwHAuRERERERERERERF8Tw7l8VzgTnYiIiIiIiIiIiIhIBw6iExERERERERERERHpwHAuRERERERERERERF+T/FsXgHKDM9GJiIiIiIiIiIiIiHTgIDoRERERERERERERkQ4M50JERERERERERET0FSnkim9dBMoFzkQnIiIiIiIiIiIiItKBg+hERERERERERERERDownAsRERERERERERHR18RwLt8VzkQnIiIiIiIiIiIiItKBg+hERERERERERERERDownAsRERERERERERHR1yT/1gWg3OBMdCIiIiIiIiIiIiIiHTiITkRERERERERERESkA8O5EBEREREREREREX1FCrniWxeBcoGD6ERERES5IfgBX+RLjP3WJchzAmuHb12EPKdQ/ICBM5Pjv3UJ8oXA2PRbFyHvyWXfugR5TiH98erE/vz78EP25z+qH7CtDAT637oIRN+lH/BbIBERERERERERERFR3uBMdCIiIiIiIiIiIqKv6cd70eGHxpnoREREREREREREREQ6cBCdiIiIiIiIiIiIiEgHhnMhIiIiIiIiIiIi+ooUcsW3LgLlAmeiExERERERERERERHpwEF0IiIiIiIiIiIiIiIdGM6FiIiIiIiIiIiI6GuSf+sCUG5wEJ2IiIiIiIiIiIiIvlhISAjmzZuHgIAAFChQAB06dMC4ceMgEol05gkPD8fmzZtx+fJlvHr1CqampqhRowYmTJiAokWLqtJdv34d/fr108jfpk0brFixIl/qk46D6ERERERERERERET0RWJjY9G/f38UL14cnp6eCAsLw6JFi5CSkoKZM2fqzPfw4UOcOXMGXbp0QeXKlREdHY2///4b3bp1w7Fjx2BlZaWWfuHChShZsqTqd0tLy3yrUzoOohMRERERERERERF9RYofMJzLrl27kJiYCC8v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LuQ6yfCZed2FXMfr+fchaVrWgxu+R+LWzfO6C7muVO+Ned2FXOcfeTuvu/BJprh+uSeeP9cfr7bldRe+ORyJTkRERDmycOHCvO7CZ3Nzy3oiLiIiIiIioi+Fo5q/L5xYlIiIiP7vHDt2LK+7QERERERERN8JJtGJiIiIiIiIiIiIiPRgORciIiIiIiIiIiKir+jHm23kx8aR6EREREREREREREREejCJTkRERERERERERESkB8u5EBEREREREREREX1FCijzuguUAxyJTkRERERERERERESkB5PoRERERERERERERER6sJwLERERERERERER0VfEYi7fF45EJyIiIiIiIiIiIiLSg0l0IiIiIiIiIiIiIiI9WM6FiIiIiIiIiIiI6CtS5HUHKEc4Ep2IiIiIiIiIiIiISA8m0YmIiIiIiIiIiIiI9GA5FyIiIiIiIiIiIqKvSAFlXneBcoAj0YmIiIiIiIiIiIiI9GASnYiIiIiIiIiIiIhID5ZzISIiIiIiIiIiIvqKWMzl+8KR6EREREREREREREREenAkOhEREVFOGJrmdQ8oO+SyvO5B7hOJ87oHuU5o4ZDXXfgilEpFXnch1wlEP95XR4Hkx4vph8Tr+XdBHpmS1134IsRGJnndhVxnIBDldReIvkv8q4GIiIiIiIiIiIjoK/rxbrn/2FjOhYiIiIiIiIiIiIhIDybRiYiIiIiIiIiIiIj0YDkXIiIiIiIiIiIioq9ICWVed4FygCPRiYiIiIiIiIiIiIj0YBKdiIiIiIiIiIiIiEgPlnMhIiIiIiIiIiIi+ooUed0ByhGORCciIiIiIiIiIiIi0oNJdCIiIiIiIiIiIiIiPVjOhYiIiIiIiIiIiOgrUkCZ112gHOBIdCIiIiIiIiIiIiIiPZhEJyIiIiIiIiIiIiLSg+VciIiIiIiIiIiIiL4iFnP5vnAkOhERERERERERERGRHkyiExERERERERERERHpwXIuRERERERERERERF+RggVdvisciU5EREREREREREREpAeT6EREREREREREREREerCcCxEREREREREREdFXpMjrDlCOMIlORET0f+7OnTuYNWsWVqxYAQDo3bs35syZg3LlyuVtx75zUlkqlu04isMXbiA2PglFC+XDsK4tUL2MR5brXr33FGv2nsKL1yGQy+VwyeeAbs1r4ac6lbXa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UkUjiU7/vxYtWoS7d+9i48aNWTf+RjVo0ACbNm36pCQ6R6J/Hzhy8fvAkejfD45E/z5wJPp34ge8nnMk+veDI9G/HV6F9H8Hz2ubA/fkdRe+OT/eX0JERET0RY0ePTqvu/DZChYs+E3VLiUiIiIiIqJvF5PoRET/50qUKKGzHntG7u7ucHJy+ko9IvryvudR9ERERERE9P1jaZDvC5PoRET/55YtW5ZlmxkzZnz5jhARERERERERfYM+f0Y6IiIiIiIiIiIiIqIfFEeiExEREREREREREX1FChZ0+a5wJDoRERERERERERERkR5MohMRERERERERERER6cFyLkRERERERERERERfkZLlXL4rHIlORERERERERERERKQHk+hERERERERERERERHqwnAsRERERERERERHRV6TI6w5QjnAkOhERERERERERERGRHkyiExERERERERERERHpwXIuRERERERERERERF+RAsq87gLlAEeiExERERERERERERHpwSQ6EREREREREREREZEeLOdCRERERERERERE9BUpWc7lu8KR6EREREREREREREREejCJTkRERERERERERESkB8u5EBEREeXAtaYb8roLua5i/7zuQe6TR8bmdRdynTwyJa+7kOvuXrTP6y7Q/zFnm7i87kKuy6+YldddyHW8nn8fzFatz+sufBGXSo3P6y7kuvImBfK6C/SBIq87QDnCkehERERERERERERERHowiU5EREREREREREREpAfLuRARERERERERERF9RUqlMq+7QDnAkehERERERERERERERHowiU5EREREREREREREpAfLuRARERERERERERF9RQqwnMv3hCPRiYiIiIiIiIiIiIj0YBKdiIiIiIiIiIiIiEgPlnMhIiIiIiIiIiIi+ooUed0ByhGORCciIiIiIiIiIiIi0oNJdCIiIiIiIiIiIiIiPVjOhYiIiIiIiIiIiOgrUkKZ112gHOBIdCIiIiIiIiIiIiIiPZhEJyIiIiIiIiIiIiLSg+VciIiIiIiIiIiIiL4iBcu5fFc4Ep2IiIiIiIiIiIiISA8m0YmIiIiIiIiIiIiI9GA5FyIiIiIiIiIiIqKvSKlkOZfvCUeiExERERERERERERHpwSQ6EREREREREREREZEeLOdC9A3y9fXF1q1b8eDBAyQmJsLBwQG1atVC3759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nTt3hre3NxwcHLReCw8Px7Bhw7Bz504da37fmERnEv17lVUS/XuU7ST6dyTbSZfvSI6SLt+JrJLoRF+SriT69y7bSfTvCK/n34evkUTPC5kl0b9Xn5JE/9YxiZ77mETXxnIuRER5LLMEuYODww+ZQCciIiIiIiIi+l4wiU5ERHni9OnTed2FPDNnzpy87gIRERERERHlISVYHOR7IszrDhARERERERERERERfauYRCciIiIiIiIiIiIi0oPlXIiIiIiIiIiIiIi+IoWS5Vy+JxyJTkRERERERERERESkB5PoRERERERERERERER6sJwLERERERERERER0VfEYi7fF45EJyIiIiIiIiIiIiLSg0l0IiIiIiIiIiIiIiI9WM6FiIiIiIiIiIiI6CtSsKDLd4Uj0YmIiIiIiIiIiIiI9GASnYiIiIiIiIiIiIhID5ZzISIiIiIiIiIiIvqKWM7l+8KR6EREREREREREREREejCJTkRERERERERERESkB8u5EBEREREREREREX1FSiXLuXxPOBKdiIiIiIiIiIiIiEgPJtGJiIiIiIiIiIiIiPRgORciIiIiIiIiIiKir0gBlnP5njCJTkRERJQDVQ50zusu5Drl66d53YVcJzQ2y+su5DqxkUledyHXVRtnmddd+DKUirzuQe4T/XhfHWXr1+V1F3KdsHzZvO5CruP1/PtwqdT4vO7CF1Hz4dy87kKuu1ZxWl53gei7xHIuRERERERERERERER6/HjDCYiIiIiIiIiIiIi+YUqWc/mucCQ6EREREREREREREZEeTKITEREREREREREREenBci5EREREREREREREX5FSyXIu3xOORCciIiIiIiIiIiIi0oNJdCIiIiIiIiIiIiIiPVjOhYiIiIiIiIiIiOgrUoDlXL4nHIlORERERERERERERHni9OnTaN26NTw9PdG0aVPs3r07y3WWLl0KDw8Pnf+mTZuWZbt///03R33kSHQiIiIiIiIiIiIi+upu3LiBYcOGoWPHjpg0aRKuXr2KyZMnw9TUFM2aNdO7XqdOnVC7dm2NZdevX8eCBQtQp04djeVGRkbYuHGjxrKCBQvmqJ9MohMRERERERERERF9RUoly7kAwIoVK1CmTBnMmjULAFCtWjUEBQVhyZIlmSbRnZyc4OTkpLFs+/btsLS01EqiC4VClCtX7rP6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7BndtVT78OSGQqHIFCeohRDqZCa6EEIIIUQG0tPTU8266tq1KyNHjkShUDB58mQ6d+6c0d1LM3FxccTExKjqm5qYmBAZGZnBvfo832JMifNrMtPsPoCsWbNSvXr1ZO8x4OnpyaJFi9KpV5/vzZs35MmTR22ZkZERM2bMwM7OjrFjx+Lv70/FihUzqIepZ2JiQkJCArGxsQDkyZOH33//nR49ejBz5kwaNmyIm5sbffr0UV2Zk1nFx8cTHx+PgYHyZ7eBgQFxcXEZ3CshMoeYmBju3LlDcHAwRkZGREREYGpqirGxcUZ37ZOcP39e9W9JoguROUkSXQghhBAigz169IgpU6bw/PlzqlatysWLF9m4cSPFihWjQoUKGd29T/ZhiY3ExNHDhw8BeP78eYb06XN9izE5OTlpJM27du2KQqHINJdfly5dmoCAACpXrpxku8DAwHTqUdrIkycPd+7coVKlShrrhg8fTvbs2fntt9+03mz0a/XDDz9QtmxZ8uXLp7a8TJkyrF+/nsOHDzN79mw2bdrE4MGD6dSpUwb19NN8eKPG+Ph4FAoFHh4eeHp6EhAQkIE9EyLz8PT05KeffuL58+f069ePvn37snPnTmbPns3hw4cZPXp0piudtm7duozuwhe1bt06fH19GTlypMa62bNnkytXrmRPdAvxtZMkuhBCCCFEBomJiWHp0qUsW7aMPHnysGbNGqpUqcL9+/eZMmUKrq6utG7dmlGjRmFlZZXR3U21tm3baiRnR40apUrOZrbZzvBtxtSrV69M2e8PVahQgU2bNiXbzsbGJlPN2q5SpQpbtmyhW7duWte7urpibW3N2LFj07lnn65Xr16qWu7du3fX2sba2prHjx8zderUTJdEd3d311i2evVq1b8z67GW1H0HMusJxG8xJoADBw7oXOfn55eOPfk0Y8aMYefOnVStWpU///yTggULAtC+fXvq16+Pu7s7Y8aMYdu2bUyZMoVChQplbIcFABs3bsTNzU3ruoIFC7Jq1SpJootMT2qiCyGEEEJkkEaNGvHq1Sv69+9P3759MTQ0VFu/detWZs2ahUKhYNSoUbRp0yaDevppPD09k22T3Mzhr823GJP4evn4+HDmzBmaNWuGpaWlznaenp54enoyePDgdOzd5xs3blyybaZPn54OPRHJSeq+A5ntXgOJvsWYgGTvo/K1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UaNGypUrl65du6b169drzZo1GjlypFq3bm12JpAmDNEBAACADOytt97SzJkz5e3t/cj1Cxcu6KOPPtKOHTt06NAhk+rgzJxliP5XvGMAwD919uxZdenSRdmzZ9e8efPk5eVldlKaLFiwQOHh4YqOjpZhGLJarcqZM6d69Oih9u3bm50HpBlDdAAAACADa9mype7du6c5c+Yob968kqTFixdr4sSJKlmypMaMGaMyZcqYXAlnFBYWplatWiX9e+cMdu7c+cR7qlWrZocSwDldunRJ//3vf1WqVCmH/bMjIiIi6esrV65o6tSpKlGihDp16pR03VF/AywxMVEnTpxQTEyMfHx8VLx4cWXKlMnsLMAmGKIDAAAAGdjdu3cVHBysU6dOacSIEZo5c6YOHz6sXr16qVOnTvzwCwB4JkRGRqpnz56Ki4tT5syZNXXqVL388stmZz01i8Xyt+v8xgrwbGKIDgAAAGRwDx480MCBA7VhwwaVLVtWn3/+uYoUKWJ2FpzckCFDFBsbq88///yxtb59+8rLy0ujR4+2fxiAZ1LLli2VJ08e9e3bV19++aXOnTunpUuXmp0FIINgWwkAAACQwbm5uWny5Mlq27atTp48qbNnz5qdhAxg+/btatCgQbJrDRo00H/+8x87F6Vd2bJln/g/AKnz+++/q2PHjipTpow6deqk33//3ewkABmIq9kBAAAAAMwTFBT0yPfx8fF6//33ValSpaRr8+fPt3cWMoDr168rR44cya75+Pjo6tWrdi5KOw8PD8XFxally5aP/DcEIG0SEhJ07949ZcuWTZLk5eWlO3fumFyVNvfv39fZs2d1//79x9b8/PxMKALwdxiiAwAAABlYwYIF//Z7IL3kzZtXBw8eVPXq1R9bO3jwoHx9fU2oSptNmzZpypQpWrlypWJiYtS/f3+ORgJS6caNG0lfJyQkSJJu376tGzdu6NatWyZVpV1cXJxGjhypVatWJT3X/+JMdODZw5noAAAAAAC7mzx5subPn68xY8aoSZMmSdfXrVunoUOHKigoSH379jWxMPV+//13jR8/Xtu3b9fbb7+tHj16yMfHx+wswKFYLBYZhpH0vdVqTfr+4deOOGyePHmyIiIiNHDgQA0YMEDDhw+Xp6enVq1apTNnzuijjz5SQECA2Zk2dfLkSRUvXtzsDCBNGKIDAAAASNHZ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\n"},"metadata":{}}]},{"cell_type":"markdown","source":["Нормализуем не категориальные признаки"],"metadata":{"id":"n-DYI5rVb7mz"}},{"cell_type":"code","source":["non_cat = num_col\n","non_cat.remove('Стоимость закупки и внедрения АСУ \"ВЕСЫ 1\"')"],"metadata":{"id":"jH2BJJISb8Ed","executionInfo":{"status":"ok","timestamp":1682461589579,"user_tz":-180,"elapsed":19,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}}},"execution_count":55,"outputs":[]},{"cell_type":"markdown","source":["Перед этим удалим все данные обозначающие индекс и не несущие информации"],"metadata":{"id":"bhTcIt_9e7kd"}},{"cell_type":"code","source":["data = data.drop(['Страна', 'Номер СВХ', 'Наименование владельца СВХ',\t'Местонахождение владельца СВХ, контакты', 'ИНН СВХ',  'Региональный таможенный орган', 'Стоимость ежемесячного обслуживания \"ВЕСЫ 1\" (мин пакет 10 рабочих мест)', 'Стоимость интегрированного ПО \"ВЕСЫ 1\" (мин пакет 10 рабочих мест)'], axis = 1)"],"metadata":{"id":"dkvokyU_e8HM","executionInfo":{"status":"ok","timestamp":1682461589580,"user_tz":-180,"elapsed":19,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}}},"execution_count":56,"outputs":[]},{"cell_type":"code","source":["data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":554},"id":"YeJPJnMrfBio","executionInfo":{"status":"ok","timestamp":1682461589580,"user_tz":-180,"elapsed":18,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"c31f7cbb-4c9a-4895-93b5-e564e18bbd32"},"execution_count":57,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     Площадь СВХ  Издержки на КПП 1, руб.\\день  Издержки на КПП 2, руб.\\день  \\\n","0           7500                   7333.333333                   8000.000000   \n","1           8100                   7333.333333                   8000.000000   \n","2           4310                   7333.333333                   8000.000000   \n","3           5430                   7333.333333                   8000.000000   \n","4           6490                   7333.333333                   8000.000000   \n","..           ...                           ...                           ...   \n","536         5027                   6000.000000                   6666.666667   \n","537         5332                   5333.333333                   6000.000000   \n","538         3454                   5333.333333                   6000.000000   \n","539         6829                   5333.333333                   6000.000000   \n","540         6306                   7333.333333                   8000.000000   \n","\n","     Издержки на ДИСПЕТЧЕРСКАЯ, руб.\\день  Количество сотрудников КПП 1  \\\n","0                                 16800.0                             4   \n","1                                 16800.0                             4   \n","2                                 16800.0                             4   \n","3                                 16800.0                             4   \n","4                                 16800.0                             4   \n","..                                    ...                           ...   \n","536                               15333.2                             4   \n","537                               13000.0                             4   \n","538                               13000.0                             4   \n","539                               13000.0                             4   \n","540                               16800.0                             4   \n","\n","     Количество сотрудников КПП 2  Количество сотрудников Диспетчерской  \\\n","0                               4                                     6   \n","1                               4                                     6   \n","2                               4                                     6   \n","3                               4                                     6   \n","4                               4                                     6   \n","..                            ...                                   ...   \n","536                             4                                     6   \n","537                             4                                     6   \n","538                             4                                     6   \n","539                             4                                     6   \n","540                             4                                     6   \n","\n","     Среднее количество товарных партий, поступающих на склад в день  \\\n","0                                                   41                 \n","1                                                   87                 \n","2                                                   94                 \n","3                                                   56                 \n","4                                                   86                 \n","..                                                 ...                 \n","536                                                 52                 \n","537                                                 79                 \n","538                                                 73                 \n","539                                                 56                 \n","540                                                 80                 \n","\n","     ФОТ КПП 1\\месяц  ФОТ КПП 2\\месяц  ФОТ ДИСПЕТЧЕРСКОЙ\\месяц  \\\n","0           220000.0         240000.0                 504000.0   \n","1           220000.0         240000.0                 504000.0   \n","2           220000.0         240000.0                 504000.0   \n","3           220000.0         240000.0                 504000.0   \n","4           220000.0         240000.0                 504000.0   \n","..               ...              ...                      ...   \n","536         180000.0         200000.0                 459996.0   \n","537         160000.0         180000.0                 390000.0   \n","538         160000.0         180000.0                 390000.0   \n","539         160000.0         180000.0                 390000.0   \n","540         220000.0         240000.0                 504000.0   \n","\n","     Стоимость заезда товарной партии на СВХ  \\\n","0                                     9000.0   \n","1                                     9000.0   \n","2                                     9000.0   \n","3                                     9000.0   \n","4                                     9000.0   \n","..                                       ...   \n","536                                   7000.0   \n","537                                   5500.0   \n","538                                   5500.0   \n","539                                   5500.0   \n","540                                   9000.0   \n","\n","     Стоимость закупки и внедрения АСУ \"ВЕСЫ 1\"  \\\n","0                                       1800000   \n","1                                       1800000   \n","2                                       1800000   \n","3                                       1800000   \n","4                                       1800000   \n","..                                          ...   \n","536                                     1800000   \n","537                                     1800000   \n","538                                     1800000   \n","539                                     1800000   \n","540                                     1800000   \n","\n","     Срок окупаемости внедрения ПО/мес.  \n","0                              4.336957  \n","1                              4.336957  \n","2                              4.336957  \n","3                              4.336957  \n","4                              4.336957  \n","..                                  ...  \n","536                            5.250000  \n","537                            5.867647  \n","538                            5.867647  \n","539                            5.867647  \n","540                            4.336957  \n","\n","[540 rows x 14 columns]"],"text/html":["\n","  <div id=\"df-49691cc7-cddb-4a43-ba62-f29fc27f7498\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Площадь СВХ</th>\n","      <th>Издержки на КПП 1, руб.\\день</th>\n","      <th>Издержки на КПП 2, руб.\\день</th>\n","      <th>Издержки на ДИСПЕТЧЕРСКАЯ, руб.\\день</th>\n","      <th>Количество сотрудников КПП 1</th>\n","      <th>Количество сотрудников КПП 2</th>\n","      <th>Количество сотрудников Диспетчерской</th>\n","      <th>Среднее количество товарных партий, поступающих на склад в день</th>\n","      <th>ФОТ КПП 1\\месяц</th>\n","      <th>ФОТ КПП 2\\месяц</th>\n","      <th>ФОТ ДИСПЕТЧЕРСКОЙ\\месяц</th>\n","      <th>Стоимость заезда товарной партии на СВХ</th>\n","      <th>Стоимость закупки и внедрения АСУ \"ВЕСЫ 1\"</th>\n","      <th>Срок окупаемости внедрения ПО/мес.</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>7500</td>\n","      <td>7333.333333</td>\n","      <td>8000.000000</td>\n","      <td>16800.0</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>6</td>\n","      <td>41</td>\n","      <td>220000.0</td>\n","      <td>240000.0</td>\n","      <td>504000.0</td>\n","      <td>9000.0</td>\n","      <td>1800000</td>\n","      <td>4.336957</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>8100</td>\n","      <td>7333.333333</td>\n","      <td>8000.000000</td>\n","      <td>16800.0</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>6</td>\n","      <td>87</td>\n","      <td>220000.0</td>\n","      <td>240000.0</td>\n","      <td>504000.0</td>\n","      <td>9000.0</td>\n","      <td>1800000</td>\n","      <td>4.336957</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4310</td>\n","      <td>7333.333333</td>\n","      <td>8000.000000</td>\n","      <td>16800.0</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>6</td>\n","      <td>94</td>\n","      <td>220000.0</td>\n","      <td>240000.0</td>\n","      <td>504000.0</td>\n","      <td>9000.0</td>\n","      <td>1800000</td>\n","      <td>4.336957</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>5430</td>\n","      <td>7333.333333</td>\n","      <td>8000.000000</td>\n","      <td>16800.0</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>6</td>\n","      <td>56</td>\n","      <td>220000.0</td>\n","      <td>240000.0</td>\n","      <td>504000.0</td>\n","      <td>9000.0</td>\n","      <td>1800000</td>\n","      <td>4.336957</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>6490</td>\n","      <td>7333.333333</td>\n","      <td>8000.000000</td>\n","      <td>16800.0</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>6</td>\n","      <td>86</td>\n","      <td>220000.0</td>\n","      <td>240000.0</td>\n","      <td>504000.0</td>\n","      <td>9000.0</td>\n","      <td>1800000</td>\n","      <td>4.336957</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>536</th>\n","      <td>5027</td>\n","      <td>6000.000000</td>\n","      <td>6666.666667</td>\n","      <td>15333.2</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>6</td>\n","      <td>52</td>\n","      <td>180000.0</td>\n","      <td>200000.0</td>\n","      <td>459996.0</td>\n","      <td>7000.0</td>\n","      <td>1800000</td>\n","      <td>5.250000</td>\n","    </tr>\n","    <tr>\n","      <th>537</th>\n","      <td>5332</td>\n","      <td>5333.333333</td>\n","      <td>6000.000000</td>\n","      <td>13000.0</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>6</td>\n","      <td>79</td>\n","      <td>160000.0</td>\n","      <td>180000.0</td>\n","      <td>390000.0</td>\n","      <td>5500.0</td>\n","      <td>1800000</td>\n","      <td>5.867647</td>\n","    </tr>\n","    <tr>\n","      <th>538</th>\n","      <td>3454</td>\n","      <td>5333.333333</td>\n","      <td>6000.000000</td>\n","      <td>13000.0</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>6</td>\n","      <td>73</td>\n","      <td>160000.0</td>\n","      <td>180000.0</td>\n","      <td>390000.0</td>\n","      <td>5500.0</td>\n","      <td>1800000</td>\n","      <td>5.867647</td>\n","    </tr>\n","    <tr>\n","      <th>539</th>\n","      <td>6829</td>\n","      <td>5333.333333</td>\n","      <td>6000.000000</td>\n","      <td>13000.0</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>6</td>\n","      <td>56</td>\n","      <td>160000.0</td>\n","      <td>180000.0</td>\n","      <td>390000.0</td>\n","      <td>5500.0</td>\n","      <td>1800000</td>\n","      <td>5.867647</td>\n","    </tr>\n","    <tr>\n","      <th>540</th>\n","      <td>6306</td>\n","      <td>7333.333333</td>\n","      <td>8000.000000</td>\n","      <td>16800.0</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>6</td>\n","      <td>80</td>\n","      <td>220000.0</td>\n","      <td>240000.0</td>\n","      <td>504000.0</td>\n","      <td>9000.0</td>\n","      <td>1800000</td>\n","      <td>4.336957</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>540 rows × 14 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-49691cc7-cddb-4a43-ba62-f29fc27f7498')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-49691cc7-cddb-4a43-ba62-f29fc27f7498 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-49691cc7-cddb-4a43-ba62-f29fc27f7498');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":57}]},{"cell_type":"code","source":[],"metadata":{"id":"Lp9YaSOHj6yg","executionInfo":{"status":"ok","timestamp":1682461589580,"user_tz":-180,"elapsed":17,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}}},"execution_count":57,"outputs":[]},{"cell_type":"code","source":["mms = MinMaxScaler()\n","data_norm = pd.DataFrame(mms.fit_transform(data), columns=data.columns)"],"metadata":{"id":"x76ECF62j7Al","executionInfo":{"status":"ok","timestamp":1682461589580,"user_tz":-180,"elapsed":17,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}}},"execution_count":58,"outputs":[]},{"cell_type":"markdown","source":["#Модель для прогноза Срока окупаемости внедрения ПО/мес."],"metadata":{"id":"xVwat8igkBCm"}},{"cell_type":"markdown","source":["Выделим из датасета прогнозируемую переменную"],"metadata":{"id":"qq3e5wUckE90"}},{"cell_type":"code","source":["X = data_norm.drop('Срок окупаемости внедрения ПО/мес.', axis=1)\n","y = data_norm['Срок окупаемости внедрения ПО/мес.']"],"metadata":{"id":"oPhsCJaikHzd","executionInfo":{"status":"ok","timestamp":1682461589581,"user_tz":-180,"elapsed":18,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}}},"execution_count":59,"outputs":[]},{"cell_type":"markdown","source":["И разделим выборку на обучающую и тестовую выборки: 70% (на обучение) /30% (на тестирование)"],"metadata":{"id":"RzJ6yNRdkMhf"}},{"cell_type":"code","source":["X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1)"],"metadata":{"id":"Q4h5h3kwkNJw","executionInfo":{"status":"ok","timestamp":1682461589581,"user_tz":-180,"elapsed":18,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}}},"execution_count":60,"outputs":[]},{"cell_type":"code","source":["print(f'Размер обучающей выборки: {X_train.shape}\\nРазмер тестовой выборки: {X_test.shape}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JsoT_pOfkT3b","executionInfo":{"status":"ok","timestamp":1682461589582,"user_tz":-180,"elapsed":19,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"f8065f68-c4d7-49b2-b835-4e10dbf4116f"},"execution_count":61,"outputs":[{"output_type":"stream","name":"stdout","text":["Размер обучающей выборки: (378, 13)\n","Размер тестовой выборки: (162, 13)\n"]}]},{"cell_type":"markdown","source":["#Базовая Линейная регрессия"],"metadata":{"id":"JHwtRE58kXrO"}},{"cell_type":"code","source":["model_LR = LinearRegression()\n","model_LR.fit(X_train, y_train)\n","y_pred = model_LR.predict(X_test)"],"metadata":{"id":"GLN3tK4ekeb_","executionInfo":{"status":"ok","timestamp":1682461589582,"user_tz":-180,"elapsed":13,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}}},"execution_count":62,"outputs":[]},{"cell_type":"markdown","source":["Случайный лес"],"metadata":{"id":"7pAvVi4-kpvt"}},{"cell_type":"code","source":["random_forest_tuning = RandomForestRegressor(random_state = 42)\n","param_grid = {\n","   'n_estimators': [20,30,40,50,60,70],\n","   'max_features': ['auto', 'sqrt', 'log2'],\n","   'max_depth' : [3,4,5,6,7]\n","}\n","GSCV = GridSearchCV(estimator=random_forest_tuning, param_grid=param_grid, cv=10, verbose=0)\n","GSCV.fit(X_train, y_train)\n","GSCV.best_params_\n","model_RF = GSCV.best_estimator_\n","model_RF.fit(X_train, y_train)\n","model_RF.predict(X_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GOkcjMoRkq1C","executionInfo":{"status":"ok","timestamp":1682461667508,"user_tz":-180,"elapsed":77939,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"46b4e77e-d432-4376-fd13-aa247f43c286"},"execution_count":63,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n"]},{"output_type":"execute_result","data":{"text/plain":["array([0.47822142, 0.15279578, 0.60344828, 1.        , 0.35461612,\n","       0.5862069 , 0.31365742, 0.46452929, 0.60344828, 0.47822142,\n","       0.31365742, 0.46452929, 0.29310345, 0.60344828, 0.29310345,\n","       0.60344828, 0.47822142, 0.14802091, 0.60344828, 1.        ,\n","       0.29310345, 0.60344828, 0.46452929, 0.47822142, 0.29310345,\n","       0.19099473, 0.21408142, 0.47822142, 0.29310345, 0.31365742,\n","       0.46452929, 0.60344828, 1.        , 0.46452929, 0.29310345,\n","       0.60344828, 0.60344828, 0.29310345, 0.60344828, 0.29310345,\n","       0.83303085, 0.60344828, 0.29310345, 0.1050471 , 0.35461612,\n","       0.5862069 , 0.47822142, 0.60344828, 0.14802091, 0.46452929,\n","       0.58663793, 0.29310345, 0.47822142, 0.23221115, 0.29310345,\n","       0.19099473, 1.        , 0.60344828, 0.21408142, 0.2163547 ,\n","       0.18621986, 0.47822142, 0.35461612, 0.22054154, 0.46452929,\n","       0.19099473, 0.46452929, 0.21408142, 1.        , 0.47822142,\n","       0.60344828, 0.46452929, 0.29310345, 0.29310345, 0.29310345,\n","       0.46452929, 0.29310345, 0.60344828, 0.46452929, 0.60344828,\n","       0.35461612, 0.29310345, 0.60344828, 0.31365742, 0.        ,\n","       0.60344828, 0.46452929, 0.29310345, 0.29310345, 0.21408142,\n","       0.46452929, 0.29310345, 0.08384133, 0.12341198, 1.        ,\n","       1.        , 0.29310345, 0.46452929, 0.46452929, 0.47822142,\n","       0.29310345, 0.60344828, 0.29310345, 0.31365742, 0.5862069 ,\n","       0.29310345, 0.29310345, 0.60344828, 0.29310345, 0.08384133,\n","       0.29310345, 0.60344828, 0.31365742, 0.21408142, 0.31365742,\n","       0.46452929, 0.60344828, 0.29310345, 0.60344828, 0.5862069 ,\n","       0.5862069 , 0.23507586, 0.29310345, 0.46452929, 0.29310345,\n","       0.60344828, 0.46452929, 0.47822142, 0.5862069 , 0.46452929,\n","       0.29310345, 0.60344828, 0.21408142, 0.46452929, 0.5862069 ,\n","       0.29310345, 0.29310345, 0.60344828, 0.        , 0.47822142,\n","       1.        , 0.29310345, 0.5862069 , 0.14075229, 0.46452929,\n","       0.60344828, 0.46452929, 0.47822142, 0.83303085, 0.29310345,\n","       0.19099473, 0.14075229, 0.29310345, 0.47822142, 1.        ,\n","       0.60344828, 0.60344828, 0.08384133, 0.47822142, 0.46452929,\n","       0.60344828, 0.12919208])"]},"metadata":{},"execution_count":63}]},{"cell_type":"markdown","source":["GridSearchCV"],"metadata":{"id":"bo8rEbhFkzhI"}},{"cell_type":"code","source":["kneighbours_regressor = KNeighborsRegressor()\n","param_grid = [{'n_neighbors': [2,3,4,5,6,7,8,9], \n","                  'weights': ['uniform','distance'],\n","                  'p':[1,2,5]}]\n","GSCV = GridSearchCV(estimator=kneighbours_regressor, param_grid=param_grid, verbose=1, scoring='accuracy', return_train_score=True)\n","GSCV.fit(X_train, y_train)\n","GSCV.best_params_\n","model_KNR = GSCV.best_estimator_\n","model_KNR.fit(X_train, y_train)\n","model_KNR.predict(X_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ErGX10EEk0Zk","executionInfo":{"status":"ok","timestamp":1682461670719,"user_tz":-180,"elapsed":3270,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"ae9174eb-8c31-437a-f40c-4f29a36cabda"},"execution_count":64,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["Fitting 5 folds for each of 48 candidates, totalling 240 fits\n"]},{"output_type":"stream","name":"stderr","text":["\u001b[1;30;43mВыходные данные были обрезаны до нескольких последних строк (5000).\u001b[0m\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n","    scores = scorer(estimator, X_test, y_test)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n","    return self._score(\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n","    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/utils/_param_validation.py\", line 192, in wrapper\n","    return func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 221, in accuracy_score\n","    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n","  File \"/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py\", line 106, in _check_targets\n","    raise ValueError(\"{0} is not supported\".format(y_type))\n","ValueError: continuous is not supported\n","\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_search.py:952: UserWarning: One or more of the test scores are non-finite: [nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan\n"," nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan\n"," nan nan nan nan nan nan nan nan nan nan nan nan]\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_search.py:952: UserWarning: One or more of the train scores are non-finite: [nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan\n"," nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan\n"," nan nan nan nan nan nan nan nan nan nan nan nan]\n","  warnings.warn(\n"]},{"output_type":"execute_result","data":{"text/plain":["array([0.47822142, 0.19099473, 0.60344828, 1.        , 0.35461612,\n","       0.5862069 , 0.31365742, 0.46530118, 0.60344828, 0.47822142,\n","       0.31365742, 0.46530118, 0.29310345, 0.60344828, 0.29310345,\n","       0.60344828, 0.47822142, 0.19099473, 0.60344828, 1.        ,\n","       0.29310345, 0.60344828, 0.46530118, 0.47822142, 0.29310345,\n","       0.19099473, 0.20689655, 0.47822142, 0.29310345, 0.31365742,\n","       0.46530118, 0.60344828, 1.        , 0.46530118, 0.29310345,\n","       0.60344828, 0.60344828, 0.29310345, 0.60344828, 0.29310345,\n","       0.83303085, 0.60344828, 0.29310345, 0.19099473, 0.35461612,\n","       0.5862069 , 0.47822142, 0.60344828, 0.19099473, 0.46530118,\n","       0.5862069 , 0.29310345, 0.47822142, 0.21964174, 0.29310345,\n","       0.19099473, 1.        , 0.60344828, 0.20689655, 0.19099473,\n","       0.19099473, 0.47822142, 0.35461612, 0.20689655, 0.46530118,\n","       0.19099473, 0.46530118, 0.20689655, 1.        , 0.47822142,\n","       0.60344828, 0.46530118, 0.29310345, 0.29310345, 0.29310345,\n","       0.46530118, 0.29310345, 0.60344828, 0.46530118, 0.60344828,\n","       0.35461612, 0.29310345, 0.60344828, 0.31365742, 0.        ,\n","       0.60344828, 0.46530118, 0.29310345, 0.29310345, 0.20689655,\n","       0.46530118, 0.29310345, 0.08035926, 0.12341198, 1.        ,\n","       1.        , 0.29310345, 0.46530118, 0.46530118, 0.47822142,\n","       0.29310345, 0.60344828, 0.29310345, 0.31365742, 0.5862069 ,\n","       0.29310345, 0.29310345, 0.60344828, 0.29310345, 0.08035926,\n","       0.29310345, 0.60344828, 0.31365742, 0.20689655, 0.31365742,\n","       0.46530118, 0.60344828, 0.29310345, 0.60344828, 0.5862069 ,\n","       0.5862069 , 0.21964174, 0.29310345, 0.46530118, 0.29310345,\n","       0.60344828, 0.46530118, 0.47822142, 0.5862069 , 0.46530118,\n","       0.29310345, 0.60344828, 0.20689655, 0.46530118, 0.5862069 ,\n","       0.29310345, 0.29310345, 0.60344828, 0.        , 0.47822142,\n","       1.        , 0.29310345, 0.5862069 , 0.12341198, 0.46530118,\n","       0.60344828, 0.46530118, 0.47822142, 0.83303085, 0.29310345,\n","       0.19099473, 0.12341198, 0.29310345, 0.47822142, 1.        ,\n","       0.60344828, 0.60344828, 0.08035926, 0.47822142, 0.46530118,\n","       0.60344828, 0.12341198])"]},"metadata":{},"execution_count":64}]},{"cell_type":"code","source":["def get_metrics(model):\n","    predicted = model.predict(X_test)\n","    return (\n","            mean_absolute_error(predicted, y_test), \n","            r2_score(predicted, y_test)\n","           )\n","                      \n","models_res = [get_metrics(model_LR), get_metrics(model_RF), get_metrics(model_KNR)]\n","res_data = {'наименование модели': ['Линейная регрессия', 'Случайный лес', 'К ближайших соседей'], \n","            'mean_absolute_error'   : [model_res[0] for model_res in models_res], \n","            'r2_score'  : [model_res[1] for model_res in models_res]\n","       }\n","pd.DataFrame(res_data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":143},"id":"ab-roKiqk4p2","executionInfo":{"status":"ok","timestamp":1682461670719,"user_tz":-180,"elapsed":5,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"aa634149-d36c-4a02-c54c-dfe2f99f1e87"},"execution_count":65,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   наименование модели  mean_absolute_error  r2_score\n","0   Линейная регрессия             0.035143  0.950771\n","1        Случайный лес             0.002433  0.997992\n","2  К ближайших соседей             0.000000  1.000000"],"text/html":["\n","  <div id=\"df-10f6f2bf-e3bf-457d-a122-f33f5fa976ff\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>наименование модели</th>\n","      <th>mean_absolute_error</th>\n","      <th>r2_score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Линейная регрессия</td>\n","      <td>0.035143</td>\n","      <td>0.950771</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Случайный лес</td>\n","      <td>0.002433</td>\n","      <td>0.997992</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>К ближайших соседей</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-10f6f2bf-e3bf-457d-a122-f33f5fa976ff')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-10f6f2bf-e3bf-457d-a122-f33f5fa976ff button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-10f6f2bf-e3bf-457d-a122-f33f5fa976ff');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":65}]},{"cell_type":"markdown","source":["#Нейронная Сеть для предсказания Срока окупаемости внедрения ПО/мес."],"metadata":{"id":"_WDdRZpsk8ZG"}},{"cell_type":"code","source":["X_train_new = np.array(X_train)\n","normalizer = tf.keras.layers.Normalization(input_shape=[13,], axis=None)\n","normalizer.adapt(X_train_new)\n","model = keras.Sequential([\n","      normalizer,\n","      tf.keras.layers.Dense(256, activation='relu'),\n","      tf.keras.layers.Dense(256, activation='relu'),\n","      tf.keras.layers.Dense(64, activation='linear'), \n","      tf.keras.layers.Dense(1)\n","])\n","\n","model.compile(loss='mean_squared_error', optimizer=tf.keras.optimizers.Adam(0.0005))"],"metadata":{"id":"OaHEr7jKk-ZN","executionInfo":{"status":"ok","timestamp":1682461671123,"user_tz":-180,"elapsed":408,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}}},"execution_count":66,"outputs":[]},{"cell_type":"code","source":["hist = model.fit(\n","    X_train,\n","    y_train,\n","    validation_split=0.2,\n","    verbose=1, epochs=20)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Q7O-Azc5lB-E","executionInfo":{"status":"ok","timestamp":1682461674894,"user_tz":-180,"elapsed":3776,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"273c2558-c5a7-41dc-c750-da244b12bda3"},"execution_count":67,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n","10/10 [==============================] - 1s 28ms/step - loss: 0.0575 - val_loss: 0.0100\n","Epoch 2/20\n","10/10 [==============================] - 0s 8ms/step - loss: 0.0130 - val_loss: 0.0086\n","Epoch 3/20\n","10/10 [==============================] - 0s 7ms/step - loss: 0.0051 - val_loss: 0.0037\n","Epoch 4/20\n","10/10 [==============================] - 0s 7ms/step - loss: 0.0027 - val_loss: 0.0019\n","Epoch 5/20\n","10/10 [==============================] - 0s 7ms/step - loss: 0.0012 - val_loss: 9.4979e-04\n","Epoch 6/20\n","10/10 [==============================] - 0s 8ms/step - loss: 5.3232e-04 - val_loss: 3.8267e-04\n","Epoch 7/20\n","10/10 [==============================] - 0s 9ms/step - loss: 2.9678e-04 - val_loss: 2.9609e-04\n","Epoch 8/20\n","10/10 [==============================] - 0s 9ms/step - loss: 1.6520e-04 - val_loss: 2.5365e-04\n","Epoch 9/20\n","10/10 [==============================] - 0s 8ms/step - loss: 1.2168e-04 - val_loss: 1.9896e-04\n","Epoch 10/20\n","10/10 [==============================] - 0s 7ms/step - loss: 1.0210e-04 - val_loss: 1.9171e-04\n","Epoch 11/20\n","10/10 [==============================] - 0s 7ms/step - loss: 7.9965e-05 - val_loss: 1.8483e-04\n","Epoch 12/20\n","10/10 [==============================] - 0s 7ms/step - loss: 7.1612e-05 - val_loss: 1.5779e-04\n","Epoch 13/20\n","10/10 [==============================] - 0s 11ms/step - loss: 5.8448e-05 - val_loss: 1.5039e-04\n","Epoch 14/20\n","10/10 [==============================] - 0s 8ms/step - loss: 4.9036e-05 - val_loss: 1.4221e-04\n","Epoch 15/20\n","10/10 [==============================] - 0s 8ms/step - loss: 3.4035e-05 - val_loss: 1.2661e-04\n","Epoch 16/20\n","10/10 [==============================] - 0s 7ms/step - loss: 3.3850e-05 - val_loss: 1.2836e-04\n","Epoch 17/20\n","10/10 [==============================] - 0s 8ms/step - loss: 3.0416e-05 - val_loss: 1.1780e-04\n","Epoch 18/20\n","10/10 [==============================] - 0s 8ms/step - loss: 2.6732e-05 - val_loss: 1.2508e-04\n","Epoch 19/20\n","10/10 [==============================] - 0s 8ms/step - loss: 2.3759e-05 - val_loss: 1.2557e-04\n","Epoch 20/20\n","10/10 [==============================] - 0s 7ms/step - loss: 2.3996e-05 - val_loss: 1.3253e-04\n"]}]},{"cell_type":"code","source":["plt.plot(hist.history['loss'], label='mean_squared_error')\n","plt.plot(hist.history['val_loss'], label='val_mean_squared_error')\n","# plt.ylim([0, 0.25])\n","plt.xlabel('Эпоха')\n","plt.ylabel('MSE [MPG]')\n","plt.legend()\n","plt.grid(True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":860},"id":"LQnl_ivwlD22","executionInfo":{"status":"ok","timestamp":1682461675529,"user_tz":-180,"elapsed":639,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"6a68c0a4-09fa-4042-e45d-c78885c00bbc"},"execution_count":68,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x1000 with 1 Axes>"],"image/png":"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fiNJmj79Np199m918cUTFR+foLy83Zo8+XK1bdtOt99+j9zuSs2d+7iuvfYKLVz4vJKSkgP3/c9/nlfPnsfr5ptvl8/nrdfP2woI/AAAAEAUM01T9z2zRt/vKAzL53dul6ZbLupfr9BfVFSkmTPnKju7kyRp7949+sc/HtBFF43XhAmXSZK6d++l5cuXafny93X++eP0z38+olNOGaObb749cJ/mzVvoxhunaPz4y5Sd3Unp6em64YZbAt/3er1q3bqNrr76Mv3441Z16NCxxjjuv/8hOZ1OSdKuXTv19NNPyu/3y2Y78hvSBQUF2rVrh6ZMuV4jRoyUJPXvf0KNcxYunK8+ffrp1lvvlCQNHjxUbrdb//rXE3X+edXlubxerx588NHArIfKynLNnz9XF154sSZNmixJGjhwiOLiHJo58x+68MI/Ki2tmV566XkZhqEHH3w0MGugZcssTZlyVdDj3LFju15++SXdcMMtOueccw981mBVVFToySfn6eyzzw38bL1er6644uoaMziqA/8555yrP/xhQuD4zJkPyefz6h//mCWXK02S1LVrd/3hD+frrbde19ix4wLnpqam6a9/fSBk+91HKt7hBwAAAKKdRTNNixaZgbAvSe3bVwXWE04YFDiWmpoa6GZv27ZVu3fv0imnjJHX6w38p1+//rLZbNq06evAdYsXv6lLLrlQY8acqFGjhujqq6v+gLBt2481xtC3b/9A2JekY47Jltfr1f79+Ucdf1pamlq1aq05c2Zp0aI39NNPeTW+7/P5tGnT1xo5clSN46NGjT7qvQ8n2Ofq129AIOxLVdP0y8vLdPLJo2v87E44YbAqKyuVm7tZkrRx4wb17z+gxisCAwYMDATsYKxeverAc57yi88apH379tX6OQ0dOuKQ9xk2rObxdevWqn//E2qMpWPHY9S5cxetX7+uxrlDhgyL+rAv0eEHAAAAopphGLrlov6NPqXf4bCFfEr/z0Nl1WdUxZfU1NQax+Pi4uR2V6qgoECSdOutNxzyfnl5uyVJH3ywTH/5y506++zf6oorrpbL1Uz79u3VrbfeILe78ohjiIuLk1S10N3RGIahhx6apblzH9NDD/1N5eXl6tath669dqr69u2vgoL98vl8Sk/PqHFdRkbGYe54ZHV5rvT05jW+rv7ZTZz4h0PeuzqE79u3V+3ata/1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SdI111yhpKQkzZjxcOC6777bpEsuuUiPPjpb/fufUOfnuvrq6zR79j+1desW3XnnX3Tyyadqw4b1mjv3MW3cuEF2u11Dh47QlCnXKz09I3D93r179MADf9Vnn32q1FSXzj9/XFA/i1/66KMVevLJedq8+XslJSVq1KjRmjz5/5SYmCip6lWQ6667UjNmPKy33npNn366Sn379tPUqTfp/PPP1q233qkvv1ynDz5YphYtWuipp15UUVGhZs16WCtXLld5eYW6du2mK6+8Rn379g98bvXP8uSTT9VTTy3Qzp07NGfOk+revWe9niMYBP4Y4TrQ4S8utcZf0AAAABAapmmq7LV75c/7Piyfb8/qosSzb61T6B858mQ9+OB9WrZsqc4774LA8ffff0+SdMopp+rTTz/R8cf30W9+c56cznh9+eU63X//PTJNUzk5ZzVozH/5y50655zzNG7cH/TMM//Sn/98k3JyfqXS0lLddtt0bdy4QfPnz1F2dmeddtoZkqQdO7bryisnKju7k2699S7ZbIaeemqBpky5Ss8997KczqoG3J49eTrvvN8pK6uVyspK9corL+uqqybq+ef/K5crLTCG/Px9euSRB3XRRROUkpKiOXNm6dZbb9BLL70qh+PoMW7mzIe0atVHuvLKa9WqVWvt27dXn3zyUeD7+/bt1bRp16pTp866++77VFpaor///X5VVJSrS5eudf6ZBftce/fu1cMPP6jx4y9VVlYrZWW10oYN63XttZM0ZMhwTZ9+nyoqyjVv3uO6+ebrNWfOk4Frb775eu3Zk6cbbrhFKSkpeuaZhfrppzzZ7fagx7ls2VLdeeetOvPMX+vSSydp3769mj17loqLi2r8MUSSZsy4V6edlqO//nVsjT/szJkzS0OHjtBdd90rv98vn8+n66+/Trt27dBVV12r9PTm+s9/XtDUqZP1+OMLavyR5ptvvtauXTt12WVXKjXVpZYts+r8s64LAn+MSD3wDn8RHX4AAICYY6huHfZwS0lJ0ZAhw7V06ds1Av/SpW9r0KAhcrnSdOqppweOm6apPn366aef8vTqq/9tcOA/77wL9NvfjpUkZWZm6uKLx+mbb74OhM/Bg4dqxYrlWrZsaSDwP/nkPLlcLv3jH/9UfHy8JOm44/rod787R2+88arOPfd8SdJ1110f+Byfz6eBAwfrrLNO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v9lsRnV1tU96VVUVEhMTG61ns9lQX1+veZffYrFAkiS1rtlshtXqe2dYVVUVOnTo4JPeVIoiYLGcPuv6LeFc3qmi1sWxC18cu/DG8QtfHLvwFSlj5/WoOm0GvDP93VMefiJl7C5UHD+tysrQju0A5xsSTbmKNKQC/szMTJ976aurq3HixAmfe++96wHAgQMH0KNHDzW9tLQUHTt2RHR0tFrul19+0dQVQuDAgQMYPHjwOfXd0SxPszz/ZFkJm76SFscufHHswhvHL3xx7MIXxy58cezCG8cv8oTUjQlDhgzBZ599BovFoqZt2bIFOp2u0YC8b9++iI+Px+bNm9U0u92OrVu3YsiQIZr2f/rpJxw8eFBN2717NyorKzF06NDzezBERERERERErSikAv4xY8YgLi4O06ZNw86dO7F+/XosXrwYY8aMQWpqqlpu/PjxyM3NVbdNJhPy8/NRWFiINWvWYPfu3bj//vtRWVmJSZMmqeVGjBiBSy65BDNmzMD27dtRVFSE+fPnY9iwYfxIPiIiIiIiIoooIXVJf2JiItasWYMnnngC06ZNQ1xcHG655RbMmjVLU05RFMiyrEmbMmUKhBAoLCxERUUFsrOzsWrVKmRkZKhloqKisHLlShQUFGD27NkwGAzIzc3F/PnzW+T4iIiIiIiIiFqKJII9HpOCkmUFFRU1rd2NRhkMOrRpE4dTp2p4X06Y4diFL45deOP4hS+OXfji2IUvjl144/iFn+TkuCY9tC+kLuknIiIiIiIiovODAT8RERERERFRBGLAT0RERERERBSBGPATERERERERRSAG/EREREREREQRiAE/ERERERERUQRiwE9EREREREQUgRjwExEREREREUUgBvxEREREREREEYgBPxEREREREVEEYsBPREREREREFIEY8BMRERERERFFIAb8RERERERERBGIAT8RERERERFRBGLAT0RERERERBSBGPATERERERERRSAG/EREREREREQRiAE/ERERERERUQRiwE9EREREREQUgRjwExEREREREUUgBvxEREREREREEYgBPxEREREREVEEYsBPREREREREFIEY8BMRERERERFFIAb8RERERERERBGIAT8RERERERFRBJKEEKK1OxHuhBBQlNA/jXq9DrKstHY36Cxw7MIXxy68cfzCF8cufHHswhfHLrxx/MKLTidBkqSg5RjwExEREREREUUgXtJPREREREREFIEY8BMRERERERFFIAb8RERERERERBGIAT8RERERERFRBGLAT0RERERERBSBGPATERERERERRSAG/EREREREREQRiAE/ERERERERUQRiwE9EREREREQUgRjwExEREREREUUgBvxEREREREREEYgBPxEREREREVEEYsBPREREREREFIEMrd0BOnf79+9HQUEBvv76a8TFxWHUqFGYOXMmjEZjo/WEEFixYgXeeOMNVFRUIDs7G/PmzUOfPn1apuMXuM2bN+ODDz7Avn37YLFY0LlzZ9xxxx0YPXo0JEkKWC8nJwdlZWU+6SUlJTCZTM3ZZXJ57733MG/ePJ/0KVOmYM6cOQHrcc6FhjvuuANffPGF37ynn34aN954o988zr2W9/vvv2PVqlX49ttv8euvvyIzMxObNm3yKffuu+9i5cqVOHLkCLp27YpZs2bh2muvDdp+eXk5CgoKsHPnTkRFRSE3Nxfz5s1DfHx8cxzOBSXY2FmtVqxevRrFxcU4ePAgjEYjevfujVmzZiErK6vRtj///HPceeedPuk33HADnnnmmfN+LBeapsy7QL9Hi4qK0K1bt0bb57xrPsHG7vDhw7juuuv81jUajfjuu+8Cts15F74Y8Ie5qqoqjB8/Hl26dMGyZctQXl6OhQsXoq6uDo888kijdVesWIGlS5dizpw5yMrKwrp16zBx4kS8//77yMjIaKEjuHC9+uqrSEtLw4MPPog2bdrgs88+w8MPP4xjx45h+vTpjdYdMWIEJk6cqEkLtsBD59/KlSuRkJCgbqempjZannMuNDz66KOwWq2atDVr1mDr1q0YNGhQo3U591rWr7/+iuLiYlx++eVQFAVCCJ8yH374IR5++GFMnToVAwcORFFREaZPn45169Y1uphmt9sxefJkAMCSJUtQV1eHRYsW4f7778fy5cub65AuGMHG7siRI3j77bcxevRozJw5E/X19SgsLMStt96K9evXBw0aAeCpp55CZmamut2mTZvzfhwXoqbMOwDo27cv5s6dq0lLT09vtG3Ou+YVbOxSUlLw9ttva9KEEJg8eTIGDhzYpH1w3oUhQWHt5ZdfFn369BGnTp1S09566y2RnZ0tjh07FrBeXV2d6Nu3r1iyZImaVl9fL6699lrx6KOPNmOPye3kyZM+aQ899JDo27evkGU5YL1rr71WLFiwoDm7RkGsX79edO/e3e8YBsI5F9pycnLElClTGi3DudfyPH8Xzp07V9x4440+Zf7617+K2bNna9JuvfVWMXny5Ebb3rhxo8jKyhL79+9X0z799FPRvXt38e23355jzynY2NXU1IjTp09r0qxWq+jfv794/PHHG217z549onv37qKkpOT8dZhUTZl348aNE3ffffcZt81517yaMnbe3POpqKioSeU478IP7+EPczt27MCgQYOQlJSkpuXl5UFRFOzatStgvb1798JqtSIvL09NMxqNyM3NxY4dO5qzy+SSnJzsk5adnQ2r1YrTp0+3Qo+oOXHOha69e/fi8OHD+Nvf/tbaXSEvOl3j/005dOgQDh48qJlXgPMS0927d8NmswWsu2PHDmRlZWneqRo8eDCSkpJQXFx8bh2noGMXGxuLmJgYTVpcXBw6deqE48ePN2fXKIhgY3cuOO+a19mM3aZNmxAfH4+cnJxm6BGFAgb8Ya60tFTzSxMAzGYz2rVrh9LS0kbrAfCp261bNxw5cgR1dXXnv7MU1FdffYXU1NSg97Ft3LgRvXr1whVXXIEpU6bg559/bqEekqeRI0ciOzsb1113HZYvXw5ZlgOW5ZwLXZs2bUJsbGzA+xo9ce6FFve86tq1qya9W7dusNvtOHToUKN1veejJEno2rVro38/qflYLBb1vuOmuPvuu5GdnY0hQ4Zg0aJF/D3awr744gv06dMHl112GcaNG4f//e9/Qetw3oUWu92OrVu3Ijc3t8nPouG8Cz+8hz/MWSwWmM1mn/TExERUVVU1Ws9oNPpMbrPZDCEEqqqqEB0dfd77S4F9+eWXKCoq8rkfzltOTg569+6Njh074tChQ3j55Zdx22234d///jfvA28h7dq1w4wZM3D55ZdDkiRs27YNzz77LMrLywM+O4NzLjQ5HA5s3rwZOTk5iI2NbbQs517ocf+d8/476N4O9nfQ8xkcbsH+flLz+de//gVJkjB27NhGyyUkJGDy5Mm48sorYTKZsGfPHhQWFqK0tJT3gbeQK6+8EqNGjUKXLl1w/PhxrFq1ChMmTMDatWtxxRVXBKzHeRdaduzYgcrKSowcOTJoWc678MWAnygEHDt2DLNmzcKAAQP8PgHV00MPPaS+/stf/oLBgwcjLy8Pq1atwmOPPdbMPSUAuOaaa3DNNdeo21dffTVMJhPWrFmDqVOnIiUlpRV7R2di165dqKioaNJ/djj3iJrP+vXr8c4772DhwoVo3759o2V79uyJnj17qtuDBg1CSkoKHn/8cZSUlKB3797N3d0L3r333qvZHjZsGEaOHIkXX3wRK1asaKVe0ZnauHEj2rZtG/SBtQDnXTjjJf1hzmw2o7q62ie9qqoKiYmJjdaz2Wyor6/XpFssFkiS1GhdOr8sFgumTJmCpKQkLFu27Izvv0pJSUG/fv2wb9++ZuohNUVeXh5kWcaPP/7oN59zLjRt2rQJSUlJuPrqq8+4Lude63PPG++/gxaLRZPvj9ls9vm0BiD43086/4qLi/HII4/gnnvuwc0333xWbbif4/D999+fz65RE8XGxmLo0KFBfx9y3oWOmpoabN++HXl5edDr9WfVBuddeGDAH+YyMzN97nmqrq7GiRMnGr0Hzp134MABTXppaSk6duzIS4tbSF1dHfLz81FdXe3zEW8UWTjnQk9dXR0+/vhjXH/99YiKimrt7tBZcM8r77+DpaWliIqKavRWC39/P4UQOHDgQJPvIadz98033+C+++7DTTfdhPvuu6+1u0PNjPMudHz00Ueoq6vjA2svAAz4w9yQIUPw2Wefqe9mAMCWLVug0+kwePDggPX69u2L+Ph4bN68WU1zP7hjyJAhzdpncnI4HJg5cyZKS0uxcuXKoJ/hHkh5eTm++uorXHbZZee5h3QmioqKoNfrNZe7eeKcCz3btm3D6dOnz/o/O5x7rS8jIwNdunTBli1bNOlFRUUYNGgQjEZjwLpDhgzBTz/9hIMHD6ppu3fvRmVlJYYOHdpcXSYPv/32G/Lz8zFw4EAsWLDgnNr68MMPAYDzsZWcPn0a//3vf4Oef8670LFp0yZ06tQJl19++Vm3wXkXHngPf5gbM2YM1q5di2nTpiE/Px/l5eVYvHgxxowZowkgx48fjyNHjuCjjz4CAJhMJuTn52PZsmVITk5G9+7d8eabb6KyshKTJk1qrcO5oCxYsADbt2/Hgw8+CKvVim+++UbN69mzJ4xGo8+4bdq0Cdu3b8fQoUORkpKCQ4cO4ZVXXoFer8eECRNa6UguPJMmTcKAAQOQlZUFAPjkk0/wzjvv4M4770S7du0AcM6Fg40bN6Jjx47o16+fTx7nXmiora1VP6qrrKwMVqtVDe779++P5ORkzJgxA3PmzEGnTp0wYMAAFBUVoaSkBK+//rraTllZGXJzc3HPPfdg+vTpAIARI0Zg+fLlmDFjBmbPno3a2losXrwYw4YN472o50GwsRNCYNKkSTCZTBg/frzmkuD4+HhcfPHFal3vsZszZw46d+6Mnj17qg8Pe/XVVzF8+HAGHudBsLFzv1GRm5uLtLQ0HD9+HKtXr8aJEyfw3HPPqe1w3rW8pvzOBICKigrs3r0bU6ZM8dsO511kYcAf5hITE7FmzRo88cQTmDZtGuLi4nDLLbdg1qxZmnKKovh8ZNiUKVMghEBhYSEqKiqQnZ2NVatW8WnTLWTXrl0AgIULF/rkffLJJ0hPT/cZt/T0dBw/fhz//Oc/UV1djYSEBAwcOBD33nsvx60Fde3aFevXr8exY8egKAq6dOmC+fPn44477lDLcM6FtqqqKnz66acYP348JEnyyefcCw0nT570uczbvf3aa69hwIABGDlyJGpra7FixQq88sor6Nq1K55//nnNk8KFEJBlGUIINS0qKgorV65EQUEBZs+eDYPBgNzcXMyfP79lDi7CBRs7wPnAWgC46667NOX69++PtWvXAvA/dpdccgk2btyIwsJC2O12pKWlYerUqbj77rub63AuKMHGrn379rDb7XjmmWdQWVmJmJgYXHHFFViwYIEmaOe8a3lN+Z0JAJs3b4bD4Qh4hRvnXWSRhOdIEhEREREREVFE4D38RERERERERBGIAT8RERERERFRBGLAT0RERERERBSBGPATERERERERRSAG/EREREREREQRiAE/ERERERERUQRiwE9EREREREQUgRjwExEREREREUUgBvxEREREREREEcjQ2h0gIiKi0PTLL79g7dq12LNnD44ePQqTyYRu3brhxhtvxNixY2E0Glu7i0RERNQISQghWrsTREREFFqsViv69++PlJQU5OXlITMzE3V1dfjyyy+xdetW9OrVCytWrEBSUlJrd5WIiIgCYMBPREREPqqrq/Hiiy9i1qxZPu/kFxcXIz8/Hzk5OXjxxRdbqYdEREQUDO/hJyIiIh8JCQmYO3eu38v2hw4diry8PHzyyScoKSkBAOTk5CArKyvglyeHw4EXXngBw4cPR69evZCTk4Onn34aNptNLbN792706NEDzz33nKbuxo0bkZWVhTfeeENNW79+Pe68804MGjQIvXr1wg033KDJJyIiulDxHn4iIiI6Y6NHj0ZRURG2bduG3r17AwCys7MxYcIETbn3338fu3bt0qQ99NBD2LBhA0aMGIEJEyagpKQEy5cvx/79+/HCCy8AAAYNGoTbbrsNr7zyCoYPH45LL70Ux48fR0FBAa666iqMHTtWbe/NN9/EJZdcgpycHBgMBmzfvh0LFiyAEAK33357M58JIiKi0MWAn4iIiAKqra1FbW2tT3rHjh0BAPv371fTUlNTMWrUKE25b7/9VhPw//TTT9iwYQP+8Y9/oKCgAABw++23Izk5GYWFhdizZw8GDhwIAHjggQewc+dOzJ07F++99x4efvhhOBwOPPnkk5AkSW3z9ddfR3R0tLo9btw4TJo0CatXr2bAT0REFzQG/ERERBTQypUr8fzzzwfMt1qtZ9RecXExAPhcCTBx4kQUFhaiuLhYDfhjYmLw1FNPYdy4cbj99ttRUlKCJ598Ul1scPMM9qurq2G329G/f3/s3LkT1dXVSEhIOKM+EhERRQoG/ERERBTQTTfdhH79+vmknz59GtOmTUN8fPwZtVdWVgadTodOnTpp0tu1awez2YyysjJNer9+/TB27FisW7cOV199NW655RafNr/66issW7YM33zzjc/VCAz4iYjoQsaAn4iIiALKyMhARkaGT/rnn38OAMjMzDyrdj0vyW+MzWbDF198AQA4dOgQamtrERMTo+b/8ccfuOuuu5CZmYkHH3wQHTp0QFRUFIqLi/Hqq69CUZSz6h8REVEk4FP6iYiI6Ix98MEHAIDrrrvujOqlpaVBURT8/vvvmvQ///wTFosFaWlpmvSlS5di//79mDt3Lg4fPowlS5Zo8rdt2wabzYaXXnoJY8aMwdChQ3HVVVdpLvMnIiK6UDHgJyIiIh9WqxXLli2D3W73yduzZw/ee+89DBs2TH1Cf1MNHToUALBmzRpN+urVqzX5gPOBf4WFhRg/fjwmTpyISZMm4fXXX1ff8QcAvV4PABBCqGnV1dVYv379GfWLiIgoEvGSfiIiIvLrpZdewoYNG3DDDTegc+fOsNls2Lt3L7Zs2YLs7Gw89dRTZ9xmjx49cPPNN+Ptt9+GxWLBlVdeie+++w4bNmzA8OHD1Qf21dfXY+7cuejcuTNmzZoFAJgxYwa2b9+OefPmYePGjYiNjcXgwYMRFRWFqVOnYsyYMaipqcG7776Liy66CCdOnDiv54OIiCjcMOAnIiIiH/Hx8fjggw/w2muvYcuWLTh27BiMRiMyMzPxwAMPYOzYsTCZTGfVdkFBAdLT07FhwwZ8/PHHaNu2LfLz8zF9+nS1zNNPP40//vgDb731lrofo9GIhQsX4tZbb8XixYvx2GOPITMzE0uXLsWzzz6LRYsWoW3bthg7diySk5Mxf/7883IuiIiIwpUkPK+BIyIiIiIiIqKIwHv4iYiIiIiIiCIQA34iIiIiIiKiCMSAn4iIiIiIiCgCMeAnIiIiIiIiikAM+ImIiIiIiIgiEAN+IiIiIiIiogjEgJ+IiIiIiIgoAjHgJyIiIiIiIopADPiJiIiIiIiIIhADfiIiIiIiIqIIxICfiIiIiIiIKAIx4CciIiIiIiKKQP8fz6MeQUKWv/QAAAAASUVORK5CYII=\n"},"metadata":{}}]},{"cell_type":"code","source":["test_pred = model.predict(X_test).flatten()\n","error = test_pred - y_test\n","plt.hist(error, bins=25)\n","plt.xlabel('Prediction Error [MPG]')\n","_ = plt.ylabel('Count')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":876},"id":"VQLlP-C5T8aO","executionInfo":{"status":"ok","timestamp":1682462063648,"user_tz":-180,"elapsed":1906,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}},"outputId":"2552ad7a-98a3-45b5-ebfb-48e432467ec6"},"execution_count":70,"outputs":[{"output_type":"stream","name":"stdout","text":["6/6 [==============================] - 0s 3ms/step\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x1000 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["# Сохранение модели"],"metadata":{"id":"kfbcbSXTARau"}},{"cell_type":"code","source":["import pickle\n","\n","pickle.dump(model, open('model.pkl', 'wb'))"],"metadata":{"id":"0Gqz4wjQjtwl","executionInfo":{"status":"ok","timestamp":1682462067457,"user_tz":-180,"elapsed":723,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}}},"execution_count":71,"outputs":[]},{"cell_type":"code","source":["model_load = pickle.load(open('/content/model.pkl', 'rb'))"],"metadata":{"id":"ggXz1pwVAOP6","executionInfo":{"status":"ok","timestamp":1682462068670,"user_tz":-180,"elapsed":807,"user":{"displayName":"Анастасия Михайлова","userId":"02304888134656706001"}}},"execution_count":72,"outputs":[]}]}